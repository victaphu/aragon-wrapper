{"version":3,"sources":["../../src/identity/LocalIdentityProvider.js"],"names":["LocalIdentityProvider","AddressIdentityProvider","constructor","identityCache","Cache","init","resolve","address","toLowerCase","get","modify","name","createdAt","Date","now","Error","metadata","set","Promise","search","searchTerm","isAddressSearch","substring","identities","getAll","results","Object","entries","filter","length","indexOf","map","remove"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEA;AACA;AACA;AACA;AACA;AACe,MAAMA,qBAAN,SAAoCC,gCAApC,CAA4D;AACzE;AACF;AACA;AACEC,EAAAA,WAAW,GAAI;AACb;AACA,SAAKC,aAAL,GAAqB,IAAIC,cAAJ,CAAU,eAAV,CAArB;AACD;;AAES,QAAJC,IAAI,GAAI;AACZ,UAAM,KAAKF,aAAL,CAAmBE,IAAnB,EAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACe,QAAPC,OAAO,CAAEC,OAAF,EAAW;AACtBA,IAAAA,OAAO,GAAGA,OAAO,CAACC,WAAR,EAAV;AACA,WAAO,KAAKL,aAAL,CAAmBM,GAAnB,CAAuBF,OAAvB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACc,QAANG,MAAM,CAAEH,OAAF,EAAW;AAAEI,IAAAA,IAAI,GAAG,EAAT;AAAaC,IAAAA,SAAS,GAAGC,IAAI,CAACC,GAAL;AAAzB,MAAwC,EAAnD,EAAuD;AACjE,QAAI,CAACH,IAAL,EAAW;AACT,YAAM,IAAII,KAAJ,CAAU,kDAAV,CAAN;AACD;;AACDR,IAAAA,OAAO,GAAGA,OAAO,CAACC,WAAR,EAAV;AAEA,UAAMQ,QAAQ,GAAG;AAAEL,MAAAA,IAAF;AAAQC,MAAAA;AAAR,KAAjB,CANiE,CAOjE;;AACA,UAAM,KAAKT,aAAL,CAAmBc,GAAnB,CAAuBV,OAAvB,EAAgCS,QAAhC,CAAN;AAEA,WAAOE,OAAO,CAACZ,OAAR,CAAgB;AAAEC,MAAAA,OAAF;AAAWS,MAAAA;AAAX,KAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACc,QAANG,MAAM,CAAEC,UAAU,GAAG,EAAf,EAAmB;AAC7B,UAAMC,eAAe,GAAGD,UAAU,CAACE,SAAX,CAAqB,CAArB,EAAwB,CAAxB,EAA2Bd,WAA3B,OAA6C,IAArE;AACA,UAAMe,UAAU,GAAG,MAAM,KAAKpB,aAAL,CAAmBqB,MAAnB,EAAzB;AACA,UAAMC,OAAO,GAAGC,MAAM,CAACC,OAAP,CAAeJ,UAAf,EACbK,MADa,CAEZ,CAAC,CAACrB,OAAD,EAAU;AAAEI,MAAAA;AAAF,KAAV,CAAD,KACGU,eAAe,IACdD,UAAU,CAACS,MAAX,GAAoB,CADrB,IAECtB,OAAO,CAACC,WAAR,GAAsBsB,OAAtB,CAA8BV,UAAU,CAACZ,WAAX,EAA9B,MAA4D,CAF9D,IAGAG,IAAI,CAACH,WAAL,GAAmBsB,OAAnB,CAA2BV,UAAU,CAACZ,WAAX,EAA3B,IAAuD,CAAC,CAN9C,EAQbuB,GARa,CAQT,CAAC,CAACxB,OAAD,EAAU;AAAEI,MAAAA;AAAF,KAAV,CAAD,MAA0B;AAAEA,MAAAA,IAAF;AAAQJ,MAAAA;AAAR,KAA1B,CARS,CAAhB;AASA,WAAOkB,OAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACc,QAAND,MAAM,GAAI;AACd,WAAO,KAAKrB,aAAL,CAAmBqB,MAAnB,EAAP;AACD;AAED;AACF;AACA;AACA;AACA;;;AACc,QAANQ,MAAM,CAAEzB,OAAF,EAAW;AACrB,UAAM,KAAKJ,aAAL,CAAmB6B,MAAnB,CAA0BzB,OAAO,CAACC,WAAR,EAA1B,CAAN;AACD;;AAnFwE","sourcesContent":["import Cache from '../cache'\nimport AddressIdentityProvider from './AddressIdentityProvider'\n\n/**\n * An local identity provider for addresses\n *\n * @class LocalIdentityProvider\n */\nexport default class LocalIdentityProvider extends AddressIdentityProvider {\n  /**\n   * Create a new identity provider attached to a locally-stored cache.\n   */\n  constructor () {\n    super()\n    this.identityCache = new Cache('localIdentity')\n  }\n\n  async init () {\n    await this.identityCache.init()\n  }\n\n  /**\n   * Resolve the locally-stored label for an address\n   *\n   * @param  {string} address Address to resolve\n   * @return {Promise} Resolved metadata, null when not found, rejected on error\n   */\n  async resolve (address) {\n    address = address.toLowerCase()\n    return this.identityCache.get(address)\n  }\n\n  /**\n   * Modify the locally-stored label of an address\n   *\n   * @param  {string} address  Address to resolve\n   * @param  {Object} metadata Metadata to modify\n   * @return {Promise} Resolved with saved address and metadata or rejected on error\n   */\n  async modify (address, { name = '', createdAt = Date.now() } = {}) {\n    if (!name) {\n      throw new Error('name is required when modifying a local identity')\n    }\n    address = address.toLowerCase()\n\n    const metadata = { name, createdAt }\n    // First save it in the cache\n    await this.identityCache.set(address, metadata)\n\n    return Promise.resolve({ address, metadata })\n  }\n\n  /**\n   * Search for matches in the locally-stored labels.\n   *\n   * If the search term starts with '0x', addresses will be matched for instead.\n   *\n   * @param  {string} searchTerm Search term\n   * @return {Promise} Resolved with array of matches, each containing the address and name\n   */\n  async search (searchTerm = '') {\n    const isAddressSearch = searchTerm.substring(0, 2).toLowerCase() === '0x'\n    const identities = await this.identityCache.getAll()\n    const results = Object.entries(identities)\n      .filter(\n        ([address, { name }]) =>\n          (isAddressSearch &&\n            searchTerm.length > 3 &&\n            address.toLowerCase().indexOf(searchTerm.toLowerCase()) === 0) ||\n          name.toLowerCase().indexOf(searchTerm.toLowerCase()) > -1\n      )\n      .map(([address, { name }]) => ({ name, address }))\n    return results\n  }\n\n  /**\n   * Get all local identities\n   *\n   * @return {Promise} Resolved with an object of all identities when completed\n   */\n  async getAll () {\n    return this.identityCache.getAll()\n  }\n\n  /**\n   * Remove a single identity from the local cache\n   *\n   * @return {Promise} Resolved when completed\n   */\n  async remove (address) {\n    await this.identityCache.remove(address.toLowerCase())\n  }\n}\n"],"file":"LocalIdentityProvider.js"}