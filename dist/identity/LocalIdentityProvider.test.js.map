{"version":3,"sources":["../../src/identity/LocalIdentityProvider.test.js"],"names":["ADDRESS_MIXED_CASE","ADDRESS_LOWER_CASE","SECOND_ADDRESS","THIRD_ADDRESS","test","beforeEach","t","context","localIdentityProvider","LocalIdentityProvider","init","afterEach","identityCache","clear","serial","plan","provider","expectedName","modify","name","identityMetadata","resolve","is","throwsAsync","instanceOf","Error","message","overwrittenName","firstIdentityMetadata","secondidentityMetadata","truthy","createdAt","name1","name2","remove","falsy","name4","all","getAll","Object","keys","length","toLowerCase","identities","searchTermToExpectation","names","address","searchTerm","expectedResult","entries","results","search","resultNames","map","deepEqual"],"mappings":"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","sourcesContent":["import test from 'ava'\n\nimport { LocalIdentityProvider } from './index'\n\nconst ADDRESS_MIXED_CASE = '0x332462D19fC398189844E6F23685e19c21F5B265'\nconst ADDRESS_LOWER_CASE = '0x332462d19fc398189844e6f23685e19c21f5b265'\nconst SECOND_ADDRESS = '0x552462d19fc398189844e6f23685e19c21f5b200'\nconst THIRD_ADDRESS = '0x7d77398078079B0D57ed872319F26D29B5405eb8'\n\ntest.beforeEach(async t => {\n  t.context.localIdentityProvider = new LocalIdentityProvider()\n  await t.context.localIdentityProvider.init()\n})\n\ntest.afterEach(async t => {\n  // Reset cache after each test because its storage is global\n  await t.context.localIdentityProvider.identityCache.clear()\n})\n\n// The tests run serially to prevent leaks between tests\n// because instances of LocalIdentityProvider rely on the\n// same underlying cache storage key.\ntest.serial('should modify a local identity', async t => {\n  t.plan(1)\n  const provider = t.context.localIdentityProvider\n  const expectedName = 'vitalik'\n\n  await provider.modify(ADDRESS_MIXED_CASE, { name: expectedName })\n  const identityMetadata = await provider.resolve(ADDRESS_MIXED_CASE)\n  t.is(identityMetadata.name, expectedName)\n})\n\ntest.serial('should throw an error when no name is given', async t => {\n  t.plan(1)\n  const provider = t.context.localIdentityProvider\n\n  await t.throwsAsync(async () => {\n    await provider.modify(ADDRESS_MIXED_CASE)\n  }, {\n    instanceOf: Error,\n    message: 'name is required when modifying a local identity'\n  })\n})\n\ntest.serial('should return null when resolving non existent local identity', async t => {\n  t.plan(1)\n  const provider = t.context.localIdentityProvider\n\n  const identityMetadata = await provider.resolve(ADDRESS_LOWER_CASE)\n  t.is(identityMetadata, null)\n})\n\ntest.serial('should throw an error when no address is provided', async t => {\n  t.plan(1)\n  const provider = t.context.localIdentityProvider\n\n  await t.throwsAsync(provider.resolve(null), {\n    instanceOf: Error\n  })\n})\n\ntest.serial('should be case insensitive when resolving', async t => {\n  t.plan(1)\n  const provider = t.context.localIdentityProvider\n  const expectedName = 'vitalik'\n\n  await provider.modify(ADDRESS_MIXED_CASE, { name: expectedName })\n  const identityMetadata = await provider.resolve(ADDRESS_LOWER_CASE)\n\n  t.is(identityMetadata.name, expectedName)\n})\n\ntest.serial('should be case insensitive when modifying', async t => {\n  t.plan(2)\n  const provider = t.context.localIdentityProvider\n  const expectedName = 'vitalik'\n  const overwrittenName = 'gavin'\n\n  await provider.modify(ADDRESS_MIXED_CASE, { name: expectedName })\n  await provider.modify(ADDRESS_LOWER_CASE, { name: overwrittenName })\n\n  const firstIdentityMetadata = await provider.resolve(ADDRESS_MIXED_CASE)\n  const secondidentityMetadata = await provider.resolve(ADDRESS_LOWER_CASE)\n\n  t.is(firstIdentityMetadata.name, overwrittenName)\n  t.is(secondidentityMetadata.name, overwrittenName)\n})\n\ntest.serial('should always have createAt in metadata', async t => {\n  t.plan(1)\n  const provider = t.context.localIdentityProvider\n  const name = 'vitalik'\n  await provider.modify(ADDRESS_MIXED_CASE, { name })\n  const identityMetadata = await provider.resolve(ADDRESS_LOWER_CASE)\n  t.truthy(identityMetadata.createdAt)\n})\n\ntest.serial('removes selected local identities', async t => {\n  t.plan(4)\n  const provider = t.context.localIdentityProvider\n  const name = 'vitalik'\n  await provider.modify(ADDRESS_MIXED_CASE, { name })\n  await provider.modify(SECOND_ADDRESS, { name })\n\n  const { name: name1 } = await provider.resolve(ADDRESS_MIXED_CASE)\n  t.is(name1, name)\n  const { name: name2 } = await provider.resolve(SECOND_ADDRESS)\n  t.is(name2, name)\n\n  await provider.remove(ADDRESS_MIXED_CASE)\n\n  t.falsy(await provider.resolve(ADDRESS_MIXED_CASE))\n  const { name: name4 } = await provider.resolve(SECOND_ADDRESS)\n  t.is(name4, name)\n})\n\ntest.serial('getAll will return all local identities with lowercase address keys', async t => {\n  t.plan(7)\n  const provider = t.context.localIdentityProvider\n  const name = 'vitalik'\n  await provider.modify(ADDRESS_MIXED_CASE, { name })\n  await provider.modify(SECOND_ADDRESS, { name })\n  await provider.modify(THIRD_ADDRESS, { name })\n\n  const all = await provider.getAll()\n\n  t.is(Object.keys(all).length, 3)\n  t.is(all[ADDRESS_LOWER_CASE].name, name)\n  t.is(all[SECOND_ADDRESS].name, name)\n  t.is(all[THIRD_ADDRESS.toLowerCase()].name, name)\n\n  t.truthy(all[ADDRESS_LOWER_CASE].createdAt)\n  t.truthy(all[SECOND_ADDRESS].createdAt)\n  t.truthy(all[THIRD_ADDRESS.toLowerCase()].createdAt)\n})\n\ntest.serial('search should return an array of results of freely matching identities', async t => {\n  // t.plan(7)\n  const provider = t.context.localIdentityProvider\n  const identities = [\n    [ '0x1110000000000000000000000000000000000001', 'James Baldwin' ],\n    [ '0x1120000000000000000000000000000000000001', 'David Deutsch' ],\n    [ '0x3000000000000000000000000000000000000001', 'Isaac Newton' ],\n    [ '0x4000000000000000000000000000000000000001', 'Henry Newton' ],\n    [ '0x6000000000000000000000000000000000000001', 'Marie Curie' ],\n    [ '0x7000000000000000000000000000000000000001', 'Winnie the Pooh' ],\n    [ '0x8900000000088888870000000000000000000001', 'Richard Feynman' ],\n    [ '0x0900000000000000000000000000000000000001', 'Aristotle' ],\n    [ '0xa000000000000000000000000000000000000002', '0x3b The Who' ],\n    [ '0x3b00000000000000000000000000000000000002', 'The man who sold the world? (Nirvana not $Bowie)' ]\n  ]\n  // map of search terms to expected count and names\n  const searchTermToExpectation = {\n    'D': { names: ['James Baldwin', 'David Deutsch', 'Richard Feynman', 'The man who sold the world? (Nirvana not $Bowie)'] },\n    'xn': { names: [] },\n    '0a': { names: [] },\n    'eu': { names: ['David Deutsch'] },\n    'new': { names: [ 'Isaac Newton', 'Henry Newton' ] },\n    'win': { names: [ 'James Baldwin', 'Winnie the Pooh' ] },\n    'jam': { names: [ 'James Baldwin' ] },\n    'ari': { names: [ 'Marie Curie', 'Aristotle' ] },\n    '0x09': { names: [ 'Aristotle' ] },\n    '0x11': { names: [ 'James Baldwin', 'David Deutsch' ] },\n    '0x3b': { names: [ '0x3b The Who', 'The man who sold the world? (Nirvana not $Bowie)' ] },\n    'who': { names: [ '0x3b The Who', 'The man who sold the world? (Nirvana not $Bowie)' ] }\n  }\n  // save test identities\n  for (const [address, name] of identities) {\n    await provider.modify(address, { name })\n  }\n\n  for (const [searchTerm, expectedResult] of Object.entries(searchTermToExpectation)) {\n    const results = await provider.search(searchTerm)\n    const resultNames = results.map(({ name }) => name)\n    t.is(results.length, expectedResult.names.length, `Matching the result count when searching for ${searchTerm}`)\n    t.deepEqual(resultNames, expectedResult.names)\n  }\n})\n"],"file":"LocalIdentityProvider.test.js"}