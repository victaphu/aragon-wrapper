{"version":3,"sources":["../../src/identity/AddressIdentityProvider.js"],"names":["AddressIdentityProvider","init","resolve","address","Error","modify","metadata"],"mappings":";;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACe,MAAMA,uBAAN,CAA8B;AAC3C;AACF;AACA;AACY,QAAJC,IAAI,GAAI,CACb;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACe,QAAPC,OAAO,CAAEC,OAAF,EAAW;AACtB,UAAM,IAAIC,KAAJ,CAAU,iBAAV,CAAN;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACc,QAANC,MAAM,CAAEF,OAAF,EAAWG,QAAX,EAAqB;AAC/B,UAAM,IAAIF,KAAJ,CAAU,iBAAV,CAAN;AACD;;AA3B0C","sourcesContent":["/**\n * An identity provider for addresses\n *\n * This is the expected interface which all identity\n * providers are expected to implement\n * Additional functionality can be added in subclasses\n *\n *\n * @class AddressIdentityProvider\n */\nexport default class AddressIdentityProvider {\n  /**\n   * Optional initialization, if required by the provider\n   */\n  async init () {\n  }\n\n  /**\n   * Resolve the identity metadata for an address\n   * Should resolve to null if an identity could not be found\n   *\n   * @param  {string} address Address to resolve\n   * @return {Promise} Resolved metadata or rejected error\n   */\n  async resolve (address) {\n    throw new Error('Not implemented')\n  }\n\n  /**\n   * Modify the identity metadata of an address\n   *\n   * @param  {string} address  Address to resolve\n   * @param  {Object} metadata Metadata to modify\n   * @return {Promise} Resolved success action or rejected error\n   */\n  async modify (address, metadata) {\n    throw new Error('Not implemented')\n  }\n}\n"],"file":"AddressIdentityProvider.js"}