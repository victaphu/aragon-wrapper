{"version":3,"sources":["../../src/radspec/postprocess.js"],"names":["postprocessRadspecDescription","description","wrapper","addressRegexStr","addressRegex","RegExp","bytes32RegexStr","bytes32Regex","combinedRegex","tokens","split","map","token","trim","filter","length","apps","pipe","toPromise","roles","reduce","acc","concat","annotateAddress","input","ANY_ENTITY","type","value","app","find","proxyAddress","replacement","name","identifier","annotateBytes32","role","bytes","appId","appName","namespace","annotateText","annotatedTokens","test","compiled","_","annotation","push","annotatedDescription","join"],"mappings":"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","sourcesContent":["import { first } from 'rxjs/operators'\nimport { getKernelNamespace } from '../core/aragonOS/kernel'\nimport { addressesEqual, ANY_ENTITY } from '../utils'\n\n/**\n  * Look for known addresses and roles in a radspec description and substitute them with a human string\n  *\n  * @param  {string} description\n  * @return {Promise<Object>} Description and annotated description\n  */\nexport async function postprocessRadspecDescription (description, wrapper) {\n  const addressRegexStr = '0x[a-fA-F0-9]{40}'\n  const addressRegex = new RegExp(`^${addressRegexStr}$`)\n  const bytes32RegexStr = '0x[a-f0-9]{64}'\n  const bytes32Regex = new RegExp(`^${bytes32RegexStr}$`)\n  const combinedRegex = new RegExp(`\\\\b(${addressRegexStr}|${bytes32RegexStr})\\\\b`)\n\n  const tokens = description\n    .split(combinedRegex)\n    .map(token => token.trim())\n    .filter(token => token)\n\n  if (tokens.length < 1) {\n    return { description }\n  }\n\n  const apps = await wrapper.apps.pipe(first()).toPromise()\n  const roles = apps\n    .map(({ roles }) => roles || [])\n    .reduce((acc, roles) => acc.concat(roles), []) // flatten\n\n  const annotateAddress = (input) => {\n    if (addressesEqual(input, ANY_ENTITY)) {\n      return [input, '“Any account”', { type: 'any-account', value: ANY_ENTITY }]\n    }\n\n    const app = apps.find(\n      ({ proxyAddress }) => addressesEqual(proxyAddress, input)\n    )\n    if (app) {\n      const replacement = `${app.name}${app.identifier ? ` (${app.identifier})` : ''}`\n      return [input, `“${replacement}”`, { type: 'app', value: app }]\n    }\n\n    return [input, input, { type: 'address', value: input }]\n  }\n\n  const annotateBytes32 = (input) => {\n    const role = roles.find(({ bytes }) => bytes === input)\n\n    if (role && role.name) {\n      return [input, `“${role.name}”`, { type: 'role', value: role }]\n    }\n\n    const app = apps.find(({ appId }) => appId === input)\n\n    if (app) {\n      // return the entire app as it contains APM package details\n      return [input, `“${app.appName}”`, { type: 'apmPackage', value: app }]\n    }\n\n    const namespace = getKernelNamespace(input)\n    if (namespace) {\n      return [input, `“${namespace.name}”`, { type: 'kernelNamespace', value: namespace }]\n    }\n\n    return [input, input, { type: 'bytes32', value: input }]\n  }\n\n  const annotateText = (input) => {\n    return [input, input, { type: 'text', value: input }]\n  }\n\n  const annotatedTokens = tokens.map(token => {\n    if (addressRegex.test(token)) {\n      return annotateAddress(token)\n    }\n    if (bytes32Regex.test(token)) {\n      return annotateBytes32(token)\n    }\n    return annotateText(token)\n  })\n\n  const compiled = annotatedTokens.reduce((acc, [_, replacement, annotation]) => {\n    acc.description.push(replacement)\n    acc.annotatedDescription.push(annotation)\n    return acc\n  }, {\n    annotatedDescription: [],\n    description: []\n  })\n\n  return {\n    annotatedDescription: compiled.annotatedDescription,\n    description: compiled.description.join(' ')\n  }\n}\n"],"file":"postprocess.js"}