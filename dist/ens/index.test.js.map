{"version":3,"sources":["../../src/ens/index.test.js"],"names":["test","beforeEach","t","ethjsEnsStub","sinon","stub","ens","proxyquire","noCallThru","load","context","afterEach","always","restore","options","provider","sendAsync","prototype","lookup","returns","result","resolve","is","getCall","args","hackyOptions","undefined","resolveAddressForNode","deepEqual"],"mappings":";;;;AAAA;;AACA;;AACA;;AAEAA,aAAKC,UAAL,CAAgBC,CAAC,IAAI;AACnB,QAAMC,YAAY,GAAGC,eAAMC,IAAN,EAArB;;AACA,QAAMC,GAAG,GAAGC,oBAAWC,UAAX,GAAwBC,IAAxB,CAA6B,SAA7B,EAAwC;AAClD,iBAAaN;AADqC,GAAxC,CAAZ;;AAIAD,EAAAA,CAAC,CAACQ,OAAF,GAAY;AACVJ,IAAAA,GADU;AAEVH,IAAAA;AAFU,GAAZ;AAID,CAVD;;AAYAH,aAAKW,SAAL,CAAeC,MAAf,CAAsB,MAAM;AAC1BR,iBAAMS,OAAN;AACD,CAFD;;AAIA,kBAAK,oBAAL,EAA4BX,CAAD,IAAO;AAChC,QAAM;AAAEI,IAAAA,GAAF;AAAOH,IAAAA;AAAP,MAAwBD,CAAC,CAACQ,OAAhC,CADgC,CAGhC;;AACA,QAAMI,OAAO,GAAG;AACdC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAE;AADH;AADI,GAAhB;AAKAb,EAAAA,YAAY,CAACc,SAAb,CAAuBC,MAAvB,GAAgCd,eAAMC,IAAN,GAAac,OAAb,CAAqB,MAArB,CAAhC,CATgC,CAUhC;;AACA,QAAMC,MAAM,GAAGd,GAAG,CAACe,OAAJ,CAAY,YAAZ,EAA0BP,OAA1B,CAAf,CAXgC,CAYhC;;AACAZ,EAAAA,CAAC,CAACoB,EAAF,CAAKF,MAAL,EAAa,MAAb;AACAlB,EAAAA,CAAC,CAACoB,EAAF,CAAKnB,YAAY,CAACc,SAAb,CAAuBC,MAAvB,CAA8BK,OAA9B,CAAsC,CAAtC,EAAyCC,IAAzC,CAA8C,CAA9C,CAAL,EAAuD,YAAvD;AACAtB,EAAAA,CAAC,CAACoB,EAAF,CAAKnB,YAAY,CAACoB,OAAb,CAAqB,CAArB,EAAwBC,IAAxB,CAA6B,CAA7B,CAAL,EAAsCV,OAAtC;AACD,CAhBD;AAkBA,kBAAK,iCAAL,EAAyCZ,CAAD,IAAO;AAC7C,QAAM;AAAEI,IAAAA,GAAF;AAAOH,IAAAA;AAAP,MAAwBD,CAAC,CAACQ,OAAhC,CAD6C,CAG7C;;AACA,QAAMe,YAAY,GAAG;AACnBV,IAAAA,QAAQ,EAAE;AACRC,MAAAA,SAAS,EAAEU;AADH;AADS,GAArB;AAKAvB,EAAAA,YAAY,CAACc,SAAb,CAAuBU,qBAAvB,GAA+CvB,eAAMC,IAAN,GAAac,OAAb,CAAqB,MAArB,CAA/C,CAT6C,CAU7C;;AACA,QAAMC,MAAM,GAAGd,GAAG,CAACe,OAAJ,CAAY,MAAZ,CAAf,CAX6C,CAY7C;;AACAnB,EAAAA,CAAC,CAACoB,EAAF,CAAKF,MAAL,EAAa,MAAb;AACAlB,EAAAA,CAAC,CAACoB,EAAF,CAAKnB,YAAY,CAACc,SAAb,CAAuBU,qBAAvB,CAA6CJ,OAA7C,CAAqD,CAArD,EAAwDC,IAAxD,CAA6D,CAA7D,CAAL,EAAsE,MAAtE;AACAtB,EAAAA,CAAC,CAAC0B,SAAF,CAAYzB,YAAY,CAACoB,OAAb,CAAqB,CAArB,EAAwBC,IAAxB,CAA6B,CAA7B,CAAZ,EAA6CC,YAA7C;AACD,CAhBD","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport proxyquire from 'proxyquire'\n\ntest.beforeEach(t => {\n  const ethjsEnsStub = sinon.stub()\n  const ens = proxyquire.noCallThru().load('./index', {\n    'ethjs-ens': ethjsEnsStub\n  })\n\n  t.context = {\n    ens,\n    ethjsEnsStub\n  }\n})\n\ntest.afterEach.always(() => {\n  sinon.restore()\n})\n\ntest('should lookup name', (t) => {\n  const { ens, ethjsEnsStub } = t.context\n\n  // arrange\n  const options = {\n    provider: {\n      sendAsync: 2\n    }\n  }\n  ethjsEnsStub.prototype.lookup = sinon.stub().returns('0x01')\n  // act\n  const result = ens.resolve('aragon.eth', options)\n  // assert\n  t.is(result, '0x01')\n  t.is(ethjsEnsStub.prototype.lookup.getCall(0).args[0], 'aragon.eth')\n  t.is(ethjsEnsStub.getCall(0).args[0], options)\n})\n\ntest('should resolve address for node', (t) => {\n  const { ens, ethjsEnsStub } = t.context\n\n  // arrange\n  const hackyOptions = {\n    provider: {\n      sendAsync: undefined\n    }\n  }\n  ethjsEnsStub.prototype.resolveAddressForNode = sinon.stub().returns('0x02')\n  // act\n  const result = ens.resolve('node')\n  // assert\n  t.is(result, '0x02')\n  t.is(ethjsEnsStub.prototype.resolveAddressForNode.getCall(0).args[0], 'node')\n  t.deepEqual(ethjsEnsStub.getCall(0).args[0], hackyOptions)\n})\n"],"file":"index.test.js"}