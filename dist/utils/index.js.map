{"version":3,"sources":["../../src/utils/index.js"],"names":["ANY_ENTITY","addressesEqual","first","second","toLowerCase","includesAddress","arr","address","some","a","makeAddressMapProxy","target","targetLowerCaseKeys","Object","entries","forEach","val","Proxy","get","property","receiver","set","value","getCacheKey","location","makeProxy","interfaceName","web3","options","abi","makeProxyFromABI","appProxyEventsAbi","filter","type","makeProxyFromAppABI","appAbi","appAbiWithProxyEvents","concat","ContractProxy"],"mappings":"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","sourcesContent":["import { isAddress } from 'web3-utils'\nimport ContractProxy from '../core/proxy'\nimport { getAbi } from '../interfaces'\n\nexport const ANY_ENTITY = '0xFFfFfFffFFfffFFfFFfFFFFFffFFFffffFfFFFfF'\n\n// Check address equality without checksums\nexport function addressesEqual (first, second) {\n  first = first && first.toLowerCase()\n  second = second && second.toLowerCase()\n  return first === second\n}\n\n// \"Safer\" version of [].includes() for addresses\nexport function includesAddress (arr, address) {\n  return arr.some(a => addressesEqual(a, address))\n}\n\n// Address map that ensures consistent non-checksummed interpretations of addresses\nexport function makeAddressMapProxy (target = {}) {\n  const targetLowerCaseKeys = {}\n  Object.entries(target).forEach(([address, val]) => {\n    targetLowerCaseKeys[address.toLowerCase()] = val\n  })\n\n  return new Proxy(targetLowerCaseKeys, {\n    get (target, property, receiver) {\n      if (property in target) {\n        return target[property]\n      }\n\n      if (typeof property === 'string' && isAddress(property)) {\n        // Our set handler will ensure any addresses are stored in all lowercase\n        return target[property.toLowerCase()]\n      }\n    },\n    set (target, property, value, receiver) {\n      if (typeof property === 'string' && isAddress(property)) {\n        target[property.toLowerCase()] = value\n      } else {\n        target[property] = value\n      }\n      return true\n    }\n  })\n}\n\n/**\n * Get a standard cache key\n *\n * @param {string} address\n * @param {string} location\n */\nexport function getCacheKey (address, location) {\n  return `${address}.${location}`\n}\n\nexport function makeProxy (address, interfaceName, web3, options) {\n  const abi = getAbi(`aragon/${interfaceName}`)\n  return makeProxyFromABI(address, abi, web3, options)\n}\n\nconst appProxyEventsAbi = getAbi('aragon/AppProxy').filter(({ type }) => type === 'event')\nexport function makeProxyFromAppABI (address, appAbi, web3, options) {\n  const appAbiWithProxyEvents = [].concat(appAbi, appProxyEventsAbi)\n  return makeProxyFromABI(address, appAbiWithProxyEvents, web3, options)\n}\n\nexport function makeProxyFromABI (address, abi, web3, options) {\n  return new ContractProxy(address, abi, web3, options)\n}\n\nexport { default as AsyncRequestCache } from './AsyncRequestCache'\n"],"file":"index.js"}