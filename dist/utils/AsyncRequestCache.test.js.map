{"version":3,"sources":["../../src/utils/AsyncRequestCache.test.js"],"names":["wait","time","Promise","resolve","setTimeout","t","requestKey","requestFn","sinon","spy","key","cache","AsyncRequestCache","request","result","requestAgain","resultAgain","is","true","has","calledOnceWith","firstKey","secondKey","requestFirst","requestSecond","resultFirst","resultSecond","resultFirstAgain","resultSecondAgain","not","callCount","requestInvalidate","Error","requestFail","throwsAsync","message","false","requestFailAgain","resultFail","resultFailAgain","requestSuccess","requestSuccessAgain","resultSuccess","resultSuccessAgain"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport AsyncRequestCache from './AsyncRequestCache'\n\nconst wait = time =>\n  new Promise(resolve => {\n    setTimeout(resolve, time)\n  })\n\ntest('AsyncRequestCache should cache requests', async (t) => {\n  // arrange\n  const requestKey = 'key'\n  const requestFn = sinon.spy(async key => {\n    await wait(100)\n    return key\n  })\n  const cache = new AsyncRequestCache(requestFn)\n\n  // act\n  const request = cache.request(requestKey)\n  const result = await request\n\n  const requestAgain = cache.request(requestKey)\n  const resultAgain = await requestAgain\n\n  // assert\n  t.is(request, requestAgain)\n  t.is(result, resultAgain)\n  t.true(cache.has(requestKey))\n  t.true(requestFn.calledOnceWith(requestKey))\n})\n\ntest('AsyncRequestCache can cache more than one key', async (t) => {\n  // arrange\n  const firstKey = 'first'\n  const secondKey = 'second'\n  const requestFn = sinon.spy(async key => {\n    await wait(100)\n    return key\n  })\n  const cache = new AsyncRequestCache(requestFn)\n\n  // act\n  const requestFirst = cache.request(firstKey)\n  const requestSecond = cache.request(secondKey)\n  const resultFirst = await requestFirst\n  const resultSecond = await requestSecond\n  // Once first two requests have settled, re-request keys\n  const resultFirstAgain = await cache.request(firstKey)\n  const resultSecondAgain = await cache.request(secondKey)\n\n  // assert\n  t.true(cache.has(firstKey))\n  t.true(cache.has(secondKey))\n  t.is(resultFirst, resultFirstAgain)\n  t.is(resultSecond, resultSecondAgain)\n  t.not(resultFirst, resultSecond)\n  t.is(requestFn.callCount, 2)\n})\n\ntest('AsyncRequestCache should be able to force invalidate requests', async (t) => {\n  // arrange\n  const requestKey = 'key'\n  const requestFn = sinon.spy(async key => {\n    await wait(100)\n    return key\n  })\n  const cache = new AsyncRequestCache(requestFn)\n\n  // act\n  const request = cache.request(requestKey)\n  await request\n\n  const requestInvalidate = cache.request(requestKey, true)\n  await requestInvalidate\n\n  // assert\n  t.not(request, requestInvalidate)\n  t.true(cache.has(requestKey))\n  t.is(requestFn.callCount, 2)\n})\n\ntest('AsyncRequestCache does not cache result if unsuccessful', async (t) => {\n  // arrange\n  const requestKey = 'key'\n  const requestFn = sinon.spy(async key => {\n    await wait(100)\n    throw new Error('error')\n  })\n  const cache = new AsyncRequestCache(requestFn)\n\n  // act\n  const requestFail = await t.throwsAsync(cache.request(requestKey))\n\n  // assert\n  t.is(requestFail.message, 'error')\n  t.false(cache.has(requestKey))\n})\n\ntest('AsyncRequestCache deduplicates in-flight requests', async (t) => {\n  // arrange\n  const requestKey = 'key'\n  const requestFn = sinon.spy(async key => {\n    await wait(100)\n    if (requestFn.callCount === 1) {\n      throw new Error('error')\n    }\n    return key\n  })\n  const cache = new AsyncRequestCache(requestFn)\n\n  // act\n  const requestFail = cache.request(requestKey)\n  const requestFailAgain = cache.request(requestKey)\n  const resultFail = await t.throwsAsync(requestFail)\n  const resultFailAgain = await t.throwsAsync(requestFailAgain)\n\n  const requestSuccess = cache.request(requestKey)\n  const requestSuccessAgain = cache.request(requestKey)\n  const resultSuccess = await requestSuccess\n  const resultSuccessAgain = await requestSuccessAgain\n\n  // assert\n  t.is(requestFail, requestFailAgain)\n  t.is(resultFail, resultFailAgain)\n  t.not(requestFail, requestSuccess)\n  t.is(requestSuccess, requestSuccessAgain)\n  t.is(resultSuccess, resultSuccessAgain)\n  t.true(cache.has(requestKey))\n  t.is(requestFn.callCount, 2)\n})\n\ntest('AsyncRequestCache should work with non-async request functions', async (t) => {\n  // arrange\n  const requestKey = 'key'\n  const requestFn = sinon.spy(key => key)\n  const cache = new AsyncRequestCache(requestFn)\n\n  // act\n  const request = cache.request(requestKey)\n  const result = await request\n\n  const requestAgain = cache.request(requestKey)\n  const resultAgain = await requestAgain\n\n  // assert\n  t.is(request, requestAgain)\n  t.is(result, resultAgain)\n  t.true(cache.has(requestKey))\n  t.true(requestFn.calledOnceWith(requestKey))\n})\n"],"file":"AsyncRequestCache.test.js"}