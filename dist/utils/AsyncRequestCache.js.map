{"version":3,"sources":["../../src/utils/AsyncRequestCache.js"],"names":["AsyncRequestCache","constructor","requestFn","Map","has","key","request","invalidate","get","Promise","resolve","catch","err","delete","set"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACe,MAAMA,iBAAN,CAAwB;AAIrC;AACF;AACA;AACA;AACA;AACEC,EAAAA,WAAW,CAAEC,SAAF,EAAa;AAAA;AAAA;AAAA,aARf,IAAIC,GAAJ;AAQe;;AAAA;AAAA;AAAA;AAAA;;AACtB,0DAAkBD,SAAlB;AACD;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEE,EAAAA,GAAG,CAAEC,GAAF,EAAO;AACR,WAAO,kDAAYD,GAAZ,CAAgBC,GAAhB,CAAP;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,OAAO,CAAED,GAAF,EAAOE,UAAP,EAAmB;AACxB,QAAI,CAACA,UAAD,IAAe,KAAKH,GAAL,CAASC,GAAT,CAAnB,EAAkC;AAChC,aAAO,kDAAYG,GAAZ,CAAgBH,GAAhB,CAAP;AACD;;AACD,UAAMC,OAAO,GAAGG,OAAO,CAACC,OAAR,qCAAgB,IAAhB,mBAAgB,IAAhB,EAAgCL,GAAhC,GACbM,KADa,CACNC,GAAD,IAAS;AACd,wDAAYC,MAAZ,CAAmBR,GAAnB;AACA,YAAMO,GAAN;AACD,KAJa,CAAhB;AAKA,sDAAYE,GAAZ,CAAgBT,GAAhB,EAAqBC,OAArB;AACA,WAAOA,OAAP;AACD;;AA1CoC","sourcesContent":["/**\n * A cache to deduplicate async requests.\n */\nexport default class AsyncRequestCache {\n  #cache = new Map()\n  #requestFn\n\n  /**\n   * Create a new AsyncRequestCache that will use `requestFn` when requesting each key\n   *\n   * @param  {function} requestFn Async function for requesting each key\n   */\n  constructor (requestFn) {\n    this.#requestFn = requestFn\n  }\n\n  /**\n   * Check if the `key` is available in the cache\n   *\n   * @param  {string} key Key to check\n   * @return {boolean} If key is in the cache\n   */\n  has (key) {\n    return this.#cache.has(key)\n  }\n\n  /**\n   * Request `key`, using previous result if cached.\n   * Resets the cache for `key` if the request was not successful.\n   *\n   * @param  {string} key Key to request\n   * @param  {boolean} [invalidate] Invalidate any previous requests\n   * @return {Promise<*>} Request result\n   */\n  request (key, invalidate) {\n    if (!invalidate && this.has(key)) {\n      return this.#cache.get(key)\n    }\n    const request = Promise.resolve(this.#requestFn(key))\n      .catch((err) => {\n        this.#cache.delete(key)\n        throw err\n      })\n    this.#cache.set(key, request)\n    return request\n  }\n}\n"],"file":"AsyncRequestCache.js"}