{"version":3,"sources":["../../src/utils/callscript.js"],"names":["CALLSCRIPT_ID","decodeSegment","script","to","substring","dataLength","parseInt","data","segment","scriptLeft","decodeCallScript","isCallScript","Error","scriptData","segments","length","push","encodeCallScript","actions","reduce","address","abi","encodeParameter","toString","slice","scriptId"],"mappings":";;;;;;;;;;;;AAAA;;AAEO,MAAMA,aAAa,GAAG,YAAtB;;;AAEP,SAASC,aAAT,CAAwBC,MAAxB,EAAgC;AAC9B;AACA,QAAMC,EAAE,GAAI,KAAID,MAAM,CAACE,SAAP,CAAiB,CAAjB,EAAoB,EAApB,CAAwB,EAAxC;AACAF,EAAAA,MAAM,GAAGA,MAAM,CAACE,SAAP,CAAiB,EAAjB,CAAT,CAH8B,CAK9B;;AACA,QAAMC,UAAU,GAAGC,QAAQ,CAAE,KAAIJ,MAAM,CAACE,SAAP,CAAiB,CAAjB,EAAoB,CAApB,CAAuB,EAA7B,EAAgC,EAAhC,CAAR,GAA8C,CAAjE;AACAF,EAAAA,MAAM,GAAGA,MAAM,CAACE,SAAP,CAAiB,CAAjB,CAAT;AACA,QAAMG,IAAI,GAAI,KAAIL,MAAM,CAACE,SAAP,CAAiB,CAAjB,EAAoBC,UAApB,CAAgC,EAAlD,CAR8B,CAU9B;;AACAH,EAAAA,MAAM,GAAGA,MAAM,CAACE,SAAP,CAAiBC,UAAjB,CAAT;AAEA,SAAO;AACLG,IAAAA,OAAO,EAAE;AACPL,MAAAA,EADO;AAEPI,MAAAA;AAFO,KADJ;AAKLE,IAAAA,UAAU,EAAEP;AALP,GAAP;AAOD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASQ,gBAAT,CAA2BR,MAA3B,EAAmC;AACxC,MAAI,CAACS,YAAY,CAACT,MAAD,CAAjB,EAA2B;AACzB,UAAM,IAAIU,KAAJ,CAAW,sBAAqBV,MAAO,EAAvC,CAAN;AACD;;AAED,MAAIW,UAAU,GAAGX,MAAM,CAACE,SAAP,CAAiB,EAAjB,CAAjB;AACA,QAAMU,QAAQ,GAAG,EAAjB;;AAEA,SAAOD,UAAU,CAACE,MAAX,GAAoB,CAA3B,EAA8B;AAC5B,UAAM;AAAEP,MAAAA,OAAF;AAAWC,MAAAA;AAAX,QAA0BR,aAAa,CAACY,UAAD,CAA7C;AACAC,IAAAA,QAAQ,CAACE,IAAT,CAAcR,OAAd;AACAK,IAAAA,UAAU,GAAGJ,UAAb;AACD;;AACD,SAAOK,QAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASG,gBAAT,CAA2BC,OAA3B,EAAoC;AACzC,SAAOA,OAAO,CAACC,MAAR,CAAe,CAACjB,MAAD,EAAS;AAAEC,IAAAA,EAAF;AAAMI,IAAAA;AAAN,GAAT,KAA0B;AAC9C,UAAMa,OAAO,GAAGC,oBAAIC,eAAJ,CAAoB,SAApB,EAA+BnB,EAA/B,CAAhB;;AACA,UAAME,UAAU,GAAGgB,oBAAIC,eAAJ,CAAoB,SAApB,EAA+B,CAACf,IAAI,CAACQ,MAAL,GAAc,CAAf,IAAoB,CAAnD,EAAsDQ,QAAtD,CAA+D,KAA/D,CAAnB;;AAEA,WAAOrB,MAAM,GAAGkB,OAAO,CAACI,KAAR,CAAc,EAAd,CAAT,GAA6BnB,UAAU,CAACmB,KAAX,CAAiB,EAAjB,CAA7B,GAAoDjB,IAAI,CAACiB,KAAL,CAAW,CAAX,CAA3D;AACD,GALM,EAKJxB,aALI,CAAP;AAMD;AAED;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASW,YAAT,CAAuBT,MAAvB,EAA+B;AACpC;AACA,QAAMuB,QAAQ,GAAGvB,MAAM,CAACE,SAAP,CAAiB,CAAjB,EAAoB,EAApB,CAAjB;AACA,SAAOqB,QAAQ,KAAKzB,aAApB;AACD","sourcesContent":["import abi from 'web3-eth-abi'\n\nexport const CALLSCRIPT_ID = '0x00000001'\n\nfunction decodeSegment (script) {\n  // Get address\n  const to = `0x${script.substring(0, 40)}`\n  script = script.substring(40)\n\n  // Get data\n  const dataLength = parseInt(`0x${script.substring(0, 8)}`, 16) * 2\n  script = script.substring(8)\n  const data = `0x${script.substring(0, dataLength)}`\n\n  // Return rest of script for processing\n  script = script.substring(dataLength)\n\n  return {\n    segment: {\n      to,\n      data\n    },\n    scriptLeft: script\n  }\n}\n\n/**\n * Decode a call script bytes string into its actions.\n *\n * Will return an array containing objects with:\n *\n *  - `to`: to address\n *  - `data`: call data\n *\n * @param {string} actions\n * @returns {Array<Object>}\n */\nexport function decodeCallScript (script) {\n  if (!isCallScript(script)) {\n    throw new Error(`Not a call script: ${script}`)\n  }\n\n  let scriptData = script.substring(10)\n  const segments = []\n\n  while (scriptData.length > 0) {\n    const { segment, scriptLeft } = decodeSegment(scriptData)\n    segments.push(segment)\n    scriptData = scriptLeft\n  }\n  return segments\n}\n\n/**\n * Encode a call script\n *\n * ```\n * CallScriptAction {\n *   to: string;\n *   data: string;\n * }\n * ```\n *\n * Example:\n *\n * input:\n * [\n *  { to: 0xaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa, data: 0x11111111 },\n *  { to: 0xbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb, data: 0x2222222222 }\n * ]\n *\n * output:\n * 0x00000001\n *   aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa0000000411111111\n *   bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb000000052222222222\n *\n *\n * @param {Array<CallScriptAction>} actions\n * @returns {string}\n */\nexport function encodeCallScript (actions) {\n  return actions.reduce((script, { to, data }) => {\n    const address = abi.encodeParameter('address', to)\n    const dataLength = abi.encodeParameter('uint256', (data.length - 2) / 2).toString('hex')\n\n    return script + address.slice(26) + dataLength.slice(58) + data.slice(2)\n  }, CALLSCRIPT_ID)\n}\n\n/**\n * Checks whether a EVMScript bytes string is a call script.\n *\n * @param {string} actions\n * @returns {bool}\n */\nexport function isCallScript (script) {\n  // Get script identifier (0x prefix + bytes4)\n  const scriptId = script.substring(0, 10)\n  return scriptId === CALLSCRIPT_ID\n}\n"],"file":"callscript.js"}