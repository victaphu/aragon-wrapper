{"version":3,"sources":["../../src/utils/apps.js"],"names":["apmAppId","appName","findAppMethod","app","methodTestFn","allowDeprecated","deprecatedFunctions","functions","method","Array","isArray","find","deprecatedFunctionsFromVersions","Object","values","every","allDeprecatedFunctions","concat","findAppMethodFromData","data","methodId","substring","sig","findAppMethodFromSignature","methodSignature","fullMethodSignature","Boolean","includes","methodName","split","knownAppIds"],"mappings":";;;;;;;;;AAAA;;AACA;;AAEO,MAAMA,QAAQ,GAAGC,OAAO,IAAI,0BAAU,GAAEA,OAAQ,eAApB,CAA5B;;;;AAEP,SAASC,aAAT,CAAwBC,GAAxB,EAA6BC,YAA7B,EAA2C;AAAEC,EAAAA;AAAF,IAAsB,EAAjE,EAAqE;AACnE,QAAM;AAAEC,IAAAA,mBAAF;AAAuBC,IAAAA;AAAvB,MAAqCJ,GAAG,IAAI,EAAlD;AAEA,MAAIK,MAAJ,CAHmE,CAInE;;AACA,MAAIC,KAAK,CAACC,OAAN,CAAcH,SAAd,CAAJ,EAA8B;AAC5BC,IAAAA,MAAM,GAAGD,SAAS,CAACI,IAAV,CAAeP,YAAf,CAAT;AACD;;AAED,MAAI,CAACI,MAAD,IAAWH,eAAf,EAAgC;AAC9B;AACA,UAAMO,+BAA+B,GAAGC,MAAM,CAACC,MAAP,CAAcR,mBAAmB,IAAI,EAArC,CAAxC;;AACA,QAAIM,+BAA+B,CAACG,KAAhC,CAAsCN,KAAK,CAACC,OAA5C,CAAJ,EAA0D;AACxD;AACA,YAAMM,sBAAsB,GAAG,GAAGC,MAAH,CAAU,GAAGL,+BAAb,CAA/B;AACAJ,MAAAA,MAAM,GAAGQ,sBAAsB,CAACL,IAAvB,CAA4BP,YAA5B,CAAT;AACD;AACF;;AAED,SAAOI,MAAP;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASU,qBAAT,CAAgCf,GAAhC,EAAqCgB,IAArC,EAA2C;AAAEd,EAAAA,eAAe,GAAG;AAApB,IAA6B,EAAxE,EAA4E;AACjF,QAAMe,QAAQ,GAAGD,IAAI,CAACE,SAAL,CAAe,CAAf,EAAkB,EAAlB,CAAjB;AACA,SAAOnB,aAAa,CAClBC,GADkB,EAElBK,MAAM,IAAI,6BAAaA,MAAM,CAACc,GAApB,EAAyBD,SAAzB,CAAmC,CAAnC,EAAsC,EAAtC,MAA8CD,QAFtC,EAGlB;AAAEf,IAAAA;AAAF,GAHkB,CAApB;AAKD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASkB,0BAAT,CAAqCpB,GAArC,EAA0CqB,eAA1C,EAA2D;AAAEnB,EAAAA,eAAe,GAAG;AAApB,IAA6B,EAAxF,EAA4F;AACjG;AACA,QAAMoB,mBAAmB,GACvBC,OAAO,CAACF,eAAD,CAAP,IAA4BA,eAAe,CAACG,QAAhB,CAAyB,GAAzB,CAA5B,IAA6DH,eAAe,CAACG,QAAhB,CAAyB,GAAzB,CAD/D;AAGA,SAAOzB,aAAa,CAClBC,GADkB,EAElBK,MAAM,IAAI;AACR;AACA,QAAIiB,mBAAJ,EAAyB;AACvB,aAAOjB,MAAM,CAACc,GAAP,KAAeE,eAAtB;AACD,KAJO,CAMR;;;AACA,UAAMI,UAAU,GAAGpB,MAAM,CAACc,GAAP,CAAWO,KAAX,CAAiB,GAAjB,EAAsB,CAAtB,CAAnB;AACA,WAAOD,UAAU,KAAKJ,eAAtB;AACD,GAXiB,EAYlB;AAAEnB,IAAAA;AAAF,GAZkB,CAApB;AAcD;;AAEM,MAAMyB,WAAW,GAAG,CACzB9B,QAAQ,CAAC,SAAD,CADiB,EAEzBA,QAAQ,CAAC,eAAD,CAFiB,EAGzBA,QAAQ,CAAC,OAAD,CAHiB,EAIzBA,QAAQ,CAAC,QAAD,CAJiB,CAApB","sourcesContent":["import { hash as namehash } from 'eth-ens-namehash'\nimport { soliditySha3 } from 'web3-utils'\n\nexport const apmAppId = appName => namehash(`${appName}.aragonpm.eth`)\n\nfunction findAppMethod (app, methodTestFn, { allowDeprecated } = {}) {\n  const { deprecatedFunctions, functions } = app || {}\n\n  let method\n  // First try to find the method in the current functions\n  if (Array.isArray(functions)) {\n    method = functions.find(methodTestFn)\n  }\n\n  if (!method && allowDeprecated) {\n    // The current functions didn't have it; try with each deprecated version's functions\n    const deprecatedFunctionsFromVersions = Object.values(deprecatedFunctions || {})\n    if (deprecatedFunctionsFromVersions.every(Array.isArray)) {\n      // Flatten all the deprecated functions\n      const allDeprecatedFunctions = [].concat(...deprecatedFunctionsFromVersions)\n      method = allDeprecatedFunctions.find(methodTestFn)\n    }\n  }\n\n  return method\n}\n\n/**\n * Find the method descriptor corresponding to the data component of a\n * transaction sent to `app`.\n *\n * @param  {Object} app App artifact\n * @param  {Object} data Data component of a transaction to app\n * @param  {Object} options Options\n * @param  {boolean} [options.allowDeprecated] Allow deprecated functions to be returned. Defaults to true.\n * @return {Object|void} Method with radspec notice and function signature, or undefined if none was found\n */\nexport function findAppMethodFromData (app, data, { allowDeprecated = true } = {}) {\n  const methodId = data.substring(2, 10)\n  return findAppMethod(\n    app,\n    method => soliditySha3(method.sig).substring(2, 10) === methodId,\n    { allowDeprecated }\n  )\n}\n\n/**\n * Find the method descriptor corresponding to an app's method signature.\n *\n * @param  {Object} app App artifact\n * @param  {string} methodSignature Method signature to be called\n * @param  {Object} options Options\n * @param  {boolean} [options.allowDeprecated] Allow deprecated functions to be returned. Defaults to true.\n * @return {Object|void} Method with radspec notice and function signature, or undefined if none was found\n */\nexport function findAppMethodFromSignature (app, methodSignature, { allowDeprecated = true } = {}) {\n  // Is the given method a full signature, e.g. 'foo(arg1,arg2,...)'\n  const fullMethodSignature =\n    Boolean(methodSignature) && methodSignature.includes('(') && methodSignature.includes(')')\n\n  return findAppMethod(\n    app,\n    method => {\n      // Note that fallback functions have the signature 'fallback' in an app's artifact.json\n      if (fullMethodSignature) {\n        return method.sig === methodSignature\n      }\n\n      // If full signature isn't given, just match against the method names\n      const methodName = method.sig.split('(')[0]\n      return methodName === methodSignature\n    },\n    { allowDeprecated }\n  )\n}\n\nexport const knownAppIds = [\n  apmAppId('finance'),\n  apmAppId('token-manager'),\n  apmAppId('vault'),\n  apmAppId('voting')\n]\n"],"file":"apps.js"}