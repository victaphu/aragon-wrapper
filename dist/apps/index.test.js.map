{"version":3,"sources":["../../src/apps/index.test.js"],"names":["t","appAddress","pool","AppContextPool","false","hasApp","get","APP_CONTEXTS","PATH","true","emit","context","counter","subscribe","val","is","fail","TRIGGER","event","deepEqual","returnValues"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport AppContextPool, { APP_CONTEXTS } from './index'\n\ntest('AppContextPool starts empty', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  const pool = new AppContextPool()\n  // assert\n  t.false(pool.hasApp(appAddress))\n})\n\ntest('AppContextPool can create new app context when retrieving a context for first time', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  const pool = new AppContextPool()\n  t.false(pool.hasApp(appAddress))\n  // act\n  pool.get(appAddress, APP_CONTEXTS.PATH)\n  // assert\n  t.true(pool.hasApp(appAddress))\n})\n\ntest('AppContextPool can create new app context when emitting initial value', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  const pool = new AppContextPool()\n  t.false(pool.hasApp(appAddress))\n  // act\n  pool.emit(appAddress, APP_CONTEXTS.PATH, '/vote')\n  // assert\n  t.true(pool.hasApp(appAddress))\n})\n\ntest('AppContextPool can read and write values to path context', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  const pool = new AppContextPool()\n  // assert\n  const context = pool.get(appAddress, APP_CONTEXTS.PATH)\n  let counter = 0\n  context.subscribe(val => {\n    if (counter === 0) {\n      t.is(val, null)\n    } else if (counter === 1) {\n      t.is(val, '/first')\n    } else if (counter === 2) {\n      t.is(val, '/second')\n    } else {\n      t.fail('too many emissions')\n    }\n    counter++\n  })\n  // act\n  pool.emit(appAddress, APP_CONTEXTS.PATH, '/first')\n  pool.emit(appAddress, APP_CONTEXTS.PATH, '/second')\n})\n\ntest('AppContextPool can read and write values to trigger context', async (t) => {\n  // arrange\n  const appAddress = '0x12'\n  const pool = new AppContextPool()\n  // assert\n  const context = pool.get(appAddress, APP_CONTEXTS.TRIGGER)\n  let counter = 0\n  context.subscribe(val => {\n    if (counter === 0) {\n      t.is(val.event, 'first')\n      t.deepEqual(val.returnValues, {})\n    } else if (counter === 1) {\n      t.is(val.event, 'second')\n      t.deepEqual(val.returnValues, {})\n    } else {\n      t.fail('too many emissions')\n    }\n    counter++\n  })\n  // act\n  pool.emit(appAddress, APP_CONTEXTS.TRIGGER, { event: 'first', returnValues: {} })\n  pool.emit(appAddress, APP_CONTEXTS.TRIGGER, { event: 'second', returnValues: {} })\n})\n"],"file":"index.test.js"}