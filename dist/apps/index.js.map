{"version":3,"sources":["../../src/apps/index.js"],"names":["contextInstantiators","path","BehaviorSubject","trigger","Subject","AppContext","constructor","appAddress","Object","entries","forEach","context","instantiator","get","Error","APP_CONTEXTS","keys","reduce","contexts","toUpperCase","AppContextPool","Map","hasApp","has","appContext","set","emit","value","next"],"mappings":";;;;;;;;;;;AAAA;;;;;;AAEA,MAAMA,oBAAoB,GAAG;AAC3BC,EAAAA,IAAI,EAAE,MAAM,IAAIC,qBAAJ,CAAoB,IAApB,CADe;AAE3BC,EAAAA,OAAO,EAAE,MAAM,IAAIC,aAAJ;AAFY,CAA7B;;AAKA,MAAMC,UAAN,CAAiB;AACfC,EAAAA,WAAW,CAAEC,UAAF,EAAc;AACvB,SAAKA,UAAL,GAAkBA,UAAlB;AAEAC,IAAAA,MAAM,CAACC,OAAP,CAAeT,oBAAf,EAAqCU,OAArC,CAA6C,CAAC,CAACC,OAAD,EAAUC,YAAV,CAAD,KAA6B;AACxE,WAAKD,OAAL,IAAgBC,YAAY,EAA5B;AACD,KAFD;AAGD;;AACDC,EAAAA,GAAG,CAAEF,OAAF,EAAW;AACZ,QAAI,CAAC,KAAKA,OAAL,CAAL,EAAoB;AAClB,YAAM,IAAIG,KAAJ,CAAW,oCAAmCH,OAAQ,QAAO,KAAKJ,UAAW,EAA7E,CAAN;AACD;;AACD,WAAO,KAAKI,OAAL,CAAP;AACD;;AAbc;;AAgBV,MAAMI,YAAY,GAAGP,MAAM,CAACQ,IAAP,CAAYhB,oBAAZ,EAAkCiB,MAAlC,CAAyC,CAACC,QAAD,EAAWP,OAAX,KAAuB;AAC1FO,EAAAA,QAAQ,CAACP,OAAO,CAACQ,WAAR,EAAD,CAAR,GAAkCR,OAAlC;AACA,SAAOO,QAAP;AACD,CAH2B,EAGzB,EAHyB,CAArB;;;;;AAKQ,MAAME,cAAN,CAAqB;AAAA;AAAA;AAAA;AAAA,aACnB,IAAIC,GAAJ;AADmB;AAAA;;AAGlCC,EAAAA,MAAM,CAAEf,UAAF,EAAc;AAClB,WAAO,wDAAkBgB,GAAlB,CAAsBhB,UAAtB,CAAP;AACD;;AAEDM,EAAAA,GAAG,CAAEN,UAAF,EAAcI,OAAd,EAAuB;AACxB,QAAIa,UAAU,GAAG,wDAAkBX,GAAlB,CAAsBN,UAAtB,CAAjB;;AACA,QAAI,CAACiB,UAAL,EAAiB;AACfA,MAAAA,UAAU,GAAG,IAAInB,UAAJ,EAAb;AACA,8DAAkBoB,GAAlB,CAAsBlB,UAAtB,EAAkCiB,UAAlC;AACD;;AAED,WAAOA,UAAU,CAACX,GAAX,CAAeF,OAAf,CAAP;AACD;;AAEDe,EAAAA,IAAI,CAAEnB,UAAF,EAAcI,OAAd,EAAuBgB,KAAvB,EAA8B;AAChC,SAAKd,GAAL,CAASN,UAAT,EAAqBI,OAArB,EAA8BiB,IAA9B,CAAmCD,KAAnC;AACD;;AAnBiC","sourcesContent":["import { BehaviorSubject, Subject } from 'rxjs'\n\nconst contextInstantiators = {\n  path: () => new BehaviorSubject(null),\n  trigger: () => new Subject()\n}\n\nclass AppContext {\n  constructor (appAddress) {\n    this.appAddress = appAddress\n\n    Object.entries(contextInstantiators).forEach(([context, instantiator]) => {\n      this[context] = instantiator()\n    })\n  }\n  get (context) {\n    if (!this[context]) {\n      throw new Error(`Could not find internal context '${context}' on ${this.appAddress}`)\n    }\n    return this[context]\n  }\n}\n\nexport const APP_CONTEXTS = Object.keys(contextInstantiators).reduce((contexts, context) => {\n  contexts[context.toUpperCase()] = context\n  return contexts\n}, {})\n\nexport default class AppContextPool {\n  #appContexts = new Map()\n\n  hasApp (appAddress) {\n    return this.#appContexts.has(appAddress)\n  }\n\n  get (appAddress, context) {\n    let appContext = this.#appContexts.get(appAddress)\n    if (!appContext) {\n      appContext = new AppContext()\n      this.#appContexts.set(appAddress, appContext)\n    }\n\n    return appContext.get(context)\n  }\n\n  emit (appAddress, context, value) {\n    this.get(appAddress, context).next(value)\n  }\n}\n"],"file":"index.js"}