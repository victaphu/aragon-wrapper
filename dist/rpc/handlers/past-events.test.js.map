{"version":3,"sources":["../../../src/rpc/handlers/past-events.test.js"],"names":["test","beforeEach","t","utilsStub","events","eventsUtils","pastEvents","default","context","plan","mockObservable","Symbol","proxyStub","sinon","stub","returns","requestStub","params","fromBlock","pastEventsObservable","true","calledOnceWithExactly","is","calledOnceWith","toBlock","undefined"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport proxyquire from 'proxyquire'\nimport sinon from 'sinon'\n\nimport * as eventsUtils from '../../utils/events'\n\ntest.beforeEach(t => {\n  const utilsStub = {\n    events: eventsUtils\n  }\n  const pastEvents = proxyquire('./past-events', {\n    '../../utils': utilsStub\n  }).default\n\n  t.context = {\n    pastEvents,\n    utilsStub\n  }\n})\n\ntest('should invoke proxy.pastEvents with the correct options', async (t) => {\n  const { pastEvents } = t.context\n\n  t.plan(2)\n  // arrange\n  const mockObservable = Symbol('mockObservable')\n  const proxyStub = {\n    pastEvents: sinon.stub().returns(mockObservable)\n  }\n  const requestStub = {\n    params: ['allEvents', { fromBlock: 5 }]\n  }\n  // act\n  const pastEventsObservable = pastEvents(requestStub, proxyStub)\n  // assert\n  t.true(proxyStub.pastEvents.calledOnceWithExactly(['allEvents'], { fromBlock: 5 }))\n  t.is(pastEventsObservable, mockObservable)\n})\n\ntest('should invoke proxy.pastEvents with the correct options for aragonAPIv1', async (t) => {\n  const { pastEvents } = t.context\n\n  t.plan(2)\n  // arrange\n  const mockObservable = Symbol('mockObservable')\n  const proxyStub = {\n    pastEvents: sinon.stub().returns(mockObservable)\n  }\n  // aragonAPIv1 only passes the fromBlock\n  const requestStub = {\n    params: [5, 10]\n  }\n  // act\n  const pastEventsObservable = pastEvents(requestStub, proxyStub)\n  // assert\n  t.true(proxyStub.pastEvents.calledOnceWith(null, { fromBlock: 5, toBlock: 10 }))\n  t.is(pastEventsObservable, mockObservable)\n})\n\ntest('should invoke proxy.pastEvents with the correct options for aragonAPIv1 when no fromBlock is passed', async (t) => {\n  const { pastEvents } = t.context\n\n  t.plan(2)\n  // arrange\n  const mockObservable = Symbol('mockObservable')\n  const proxyStub = {\n    pastEvents: sinon.stub().returns(mockObservable)\n  }\n  // aragonAPIv1 does not need to pass the fromBlock\n  const requestStub = {\n    params: []\n  }\n  // act\n  const pastEventsObservable = pastEvents(requestStub, proxyStub)\n  // assert\n  t.true(proxyStub.pastEvents.calledOnceWith(null, { fromBlock: undefined, toBlock: undefined }))\n  t.is(pastEventsObservable, mockObservable)\n})\n"],"file":"past-events.test.js"}