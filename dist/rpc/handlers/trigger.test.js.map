{"version":3,"sources":["../../../src/rpc/handlers/trigger.test.js"],"names":["test","afterEach","always","sinon","restore","t","plan","appAddress","triggerContextMock","event","returnValues","data","requestStub","params","proxyStub","address","appContextPoolStub","get","stub","withArgs","APP_CONTEXTS","TRIGGER","returns","wrapperStub","appContextPool","result","emitIndex","subscribe","value","deepEqual","fail","newEventName","newEventData","emit","true","calledOnceWith","throwsAsync","message"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport { of } from 'rxjs'\n\nimport { APP_CONTEXTS } from '../../apps'\nimport trigger from './trigger'\n\ntest.afterEach.always(() => {\n  sinon.restore()\n})\n\ntest(\"should return an observable for the app's triggers\", async (t) => {\n  t.plan(3)\n\n  // arrange\n  const appAddress = '0xABCD'\n  const triggerContextMock = of(\n    {\n      event: 'event1',\n      returnValues: {\n        data: 'data1'\n      }\n    },\n    {\n      event: 'event2',\n      returnValues: {\n        data: 'data2'\n      }\n    },\n    {\n      event: 'event3',\n      returnValues: {\n        data: 'data3'\n      }\n    }\n  )\n  const requestStub = {\n    params: ['observe']\n  }\n  const proxyStub = {\n    address: appAddress\n  }\n  const appContextPoolStub = {\n    get: sinon\n      .stub()\n      .withArgs(appAddress, APP_CONTEXTS.TRIGGER)\n      .returns(triggerContextMock)\n  }\n  const wrapperStub = {\n    appContextPool: appContextPoolStub\n  }\n\n  // act\n  const result = trigger(requestStub, proxyStub, wrapperStub)\n\n  // assert\n  let emitIndex = 0\n  result.subscribe(value => {\n    if (emitIndex === 0) {\n      t.deepEqual(value, {\n        event: 'event1',\n        returnValues: {\n          data: 'data1'\n        }\n      })\n    } else if (emitIndex === 1) {\n      t.deepEqual(value, {\n        event: 'event2',\n        returnValues: {\n          data: 'data2'\n        }\n      })\n    } else if (emitIndex === 2) {\n      t.deepEqual(value, {\n        event: 'event3',\n        returnValues: {\n          data: 'data3'\n        }\n      })\n    } else {\n      t.fail('too many emissions')\n    }\n\n    emitIndex++\n  })\n})\n\ntest('should emit trigger', async (t) => {\n  t.plan(1)\n\n  // arrange\n  const appAddress = '0xABCD'\n  const newEventName = 'newEvent'\n  const newEventData = 'newData'\n  const requestStub = {\n    params: ['emit', newEventName, newEventData]\n  }\n  const proxyStub = {\n    address: appAddress\n  }\n  const appContextPoolStub = {\n    emit: sinon.stub()\n  }\n  const wrapperStub = {\n    appContextPool: appContextPoolStub\n  }\n\n  // act\n  trigger(requestStub, proxyStub, wrapperStub)\n\n  // assert\n  t.true(appContextPoolStub.emit.calledOnceWith(\n    appAddress,\n    APP_CONTEXTS.TRIGGER,\n    {\n      event: newEventName,\n      returnValues: newEventData\n    }\n  ))\n})\n\ntest('should error on invalid trigger request', async (t) => {\n  t.plan(1)\n\n  // arrange\n  const appAddress = '0xABCD'\n  const requestStub = {\n    params: ['notHandled']\n  }\n  const proxyStub = {\n    address: appAddress\n  }\n\n  // assert\n  await t.throwsAsync(\n    trigger(requestStub, proxyStub),\n    { message: 'Invalid trigger operation' }\n  )\n})\n"],"file":"trigger.test.js"}