{"version":3,"sources":["../../../src/rpc/handlers/index.test.js"],"names":["test","afterEach","always","sinon","restore","t","plan","requestStub","request","id","method","params","value","foo","handlerStub","Promise","resolve","reject","Error","result","completed","Set","subscribe","next","payload","signals","COMPLETE","has","fail","add","is","message","true","complete","deepEqual","sort","handlerA","handlerB"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport { of, from } from 'rxjs'\nimport { signals } from '@aragon/rpc-messenger'\n\nimport {\n  createRequestHandler,\n  combineRequestHandlers\n} from './index'\n\ntest.afterEach.always(() => {\n  sinon.restore()\n})\n\ntest('should create a request handler', async (t) => {\n  t.plan(8)\n  // arrange\n  const requestStub = from([{\n    request: {\n      id: 'uuid0',\n      // this one should get filtered away\n      method: 'accounts'\n    }\n  }, {\n    request: {\n      id: 'uuid1',\n      method: 'cache',\n      params: ['get', 'settings']\n    }\n  }, {\n    request: {\n      id: 'uuid4',\n      method: 'cache',\n      params: ['set', 'settings'],\n      value: { foo: 'bar' }\n    }\n  }, {\n    request: {\n      id: 'uuid5',\n      method: 'cache',\n      params: ['clear']\n    }\n  }, {\n    request: {\n      id: 'uuid6',\n      method: 'cache',\n      params: ['get', 'profile']\n    }\n  }, {\n    request: {\n      // this one should NOT get filtered away, but assigned a default response of null\n      id: 'uuid8',\n      method: 'cache'\n    }\n  }])\n  const handlerStub = (request) => {\n    if (request.id === 'uuid8') {\n      // undefined result, this will get converted into null so it can be transmited over JSON RPC\n      return Promise.resolve()\n    }\n\n    if (request.params[0] === 'set') {\n      return Promise.reject(new Error(`no permissions to change ${request.params[1]}!!`))\n    }\n\n    if (request.params[0] === 'clear') {\n      return Promise.reject(new Error())\n    }\n\n    return Promise.resolve(`resolved ${request.params[1]}`)\n  }\n  // act\n  const result = createRequestHandler(requestStub, 'cache', handlerStub)\n  // assert\n  const completed = new Set()\n  result.subscribe({\n    next (value) {\n      if (value.payload === signals.COMPLETE) {\n        if (completed.has(value.id)) {\n          t.fail(`request (${value.id}) completed twice`)\n        }\n        completed.add(value.id)\n        return\n      }\n\n      if (value.id === 'uuid1') {\n        return t.is(value.payload, 'resolved settings')\n      }\n      if (value.id === 'uuid4') {\n        t.is(value.payload.message, 'no permissions to change settings!!')\n        return t.true(value.payload instanceof Error)\n      }\n      if (value.id === 'uuid5') {\n        t.is(value.payload.message, '')\n        return t.true(value.payload instanceof Error)\n      }\n      if (value.id === 'uuid6') {\n        return t.is(value.payload, 'resolved profile')\n      }\n      if (value.id === 'uuid8') {\n        return t.is(value.payload, null)\n      }\n    },\n    // Check non-erroring requests completed correctly\n    complete () {\n      return t.deepEqual([...completed].sort(), ['uuid1', 'uuid6', 'uuid8'])\n    }\n  })\n})\n\ntest('should combine request handlers', async (t) => {\n  t.plan(2)\n  // arrange\n  const handlerA = of('handler for A')\n  const handlerB = of('handler for B')\n  // act\n  const result = combineRequestHandlers(handlerA, handlerB)\n  // assert\n  result.subscribe(value => {\n    t.true(value === 'handler for A' || value === 'handler for B')\n  })\n})\n"],"file":"index.test.js"}