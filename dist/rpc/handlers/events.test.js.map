{"version":3,"sources":["../../../src/rpc/handlers/events.test.js"],"names":["test","beforeEach","t","utilsStub","events","eventsUtils","default","context","plan","mockObservable","Symbol","proxyStub","sinon","stub","returns","requestStub","params","fromBlock","eventsObservable","true","calledOnceWithExactly","is","calledOnceWith","undefined"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport proxyquire from 'proxyquire'\nimport sinon from 'sinon'\n\nimport * as eventsUtils from '../../utils/events'\n\ntest.beforeEach(t => {\n  const utilsStub = {\n    events: eventsUtils\n  }\n  const events = proxyquire('./events', {\n    '../../utils': utilsStub\n  }).default\n\n  t.context = {\n    events,\n    utilsStub\n  }\n})\n\ntest('should invoke proxy.events with the correct options', async (t) => {\n  const { events } = t.context\n\n  t.plan(2)\n  // arrange\n  const mockObservable = Symbol('mockObservable')\n  const proxyStub = {\n    events: sinon.stub().returns(mockObservable)\n  }\n  const requestStub = {\n    params: ['allEvents', { fromBlock: 5 }]\n  }\n  // act\n  const eventsObservable = events(requestStub, proxyStub)\n  // assert\n  t.true(proxyStub.events.calledOnceWithExactly(['allEvents'], { fromBlock: 5 }))\n  t.is(eventsObservable, mockObservable)\n})\n\ntest('should invoke proxy.events with the correct options for aragonAPIv1', async (t) => {\n  const { events } = t.context\n\n  t.plan(2)\n  // arrange\n  const mockObservable = Symbol('mockObservable')\n  const proxyStub = {\n    events: sinon.stub().returns(mockObservable)\n  }\n  // aragonAPIv1 only passes the fromBlock\n  const requestStub = {\n    params: [5]\n  }\n  // act\n  const eventsObservable = events(requestStub, proxyStub)\n  // assert\n  t.true(proxyStub.events.calledOnceWith(null, { fromBlock: 5 }))\n  t.is(eventsObservable, mockObservable)\n})\n\ntest('should invoke proxy.events with the correct options for aragonAPIv1 when no fromBlock is passed', async (t) => {\n  const { events } = t.context\n\n  t.plan(2)\n  // arrange\n  const mockObservable = Symbol('mockObservable')\n  const proxyStub = {\n    events: sinon.stub().returns(mockObservable)\n  }\n  // aragonAPIv1 does not need to pass the fromBlock\n  const requestStub = {\n    params: []\n  }\n  // act\n  const eventsObservable = events(requestStub, proxyStub)\n  // assert\n  t.true(proxyStub.events.calledOnceWith(null, { fromBlock: undefined }))\n  t.is(eventsObservable, mockObservable)\n})\n"],"file":"events.test.js"}