{"version":3,"sources":["../../src/cache/index.test.js"],"names":["test","beforeEach","t","configurationStub","getConfiguration","sinon","stub","Cache","default","context","afterEach","always","restore","plan","instance","init","is","db","driver","memoryStorageDriver","_driver","changes","subscribe","change","deepEqual","key","value","set","get","drivers","localforage","INDEXEDDB","LOCALSTORAGE","withArgs","configurationKeys","FORCE_LOCAL_STORAGE","returns","setItem","getItem","getCall","args","title","allBefore","getAll","allAfter","Object","keys","length","one","two","three","four","item","removeItem","remove","clear","observable","observe","Promise","resolve","setTimeout","emissionNumber","next"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport proxyquire from 'proxyquire'\nimport sinon from 'sinon'\n\nimport localforage from 'localforage'\nimport memoryStorageDriver from 'localforage-memoryStorageDriver'\nimport * as configurationKeys from '../configuration/keys'\n\ntest.beforeEach(t => {\n  const configurationStub = {\n    getConfiguration: sinon.stub()\n  }\n  const Cache = proxyquire('./index', {\n    '../configuration': configurationStub\n  }).default\n\n  t.context = {\n    Cache,\n    configurationStub\n  }\n})\n\ntest.afterEach.always(() => {\n  sinon.restore()\n})\n\ntest('should set the cache driver to in-memory on non-browser environments', async (t) => {\n  const { Cache } = t.context\n\n  t.plan(3)\n  // arrange\n  const instance = new Cache('counterapp')\n  await instance.init()\n  // assert\n  t.is(instance.db.driver(), memoryStorageDriver._driver)\n  instance.changes.subscribe(change => {\n    t.deepEqual(change, { key: 'counter', value: 5 })\n  })\n  // act\n  await instance.set('counter', 5)\n  // assert\n  t.is(await instance.get('counter'), 5)\n})\n\ntest('should prefer indexeddb driver by default', async (t) => {\n  const { Cache } = t.context\n\n  // arrange\n  const instance = new Cache('counterapp')\n  // assert\n  t.deepEqual(\n    instance.drivers,\n    [localforage.INDEXEDDB, localforage.LOCALSTORAGE, memoryStorageDriver]\n  )\n})\n\ntest('should downgrade to localstorage driver when requested', async (t) => {\n  const { Cache, configurationStub } = t.context\n\n  // arrange\n  configurationStub.getConfiguration.withArgs(configurationKeys.FORCE_LOCAL_STORAGE).returns(true)\n  // act\n  const instance = new Cache('counterapp')\n  // assert\n  t.deepEqual(\n    instance.drivers,\n    [localforage.LOCALSTORAGE, memoryStorageDriver]\n  )\n})\n\ntest('should set to the cache and emit the change', async (t) => {\n  const { Cache } = t.context\n\n  t.plan(3)\n  // arrange\n  const instance = new Cache('counterapp')\n  await instance.init()\n  instance.db.setItem = sinon.stub()\n  instance.db.getItem = sinon.stub()\n  // assert\n  instance.changes.subscribe(change => {\n    t.deepEqual(change, { key: 'counter', value: 5 })\n    t.is(instance.db.setItem.getCall(0).args[0], 'counter')\n    t.is(instance.db.setItem.getCall(0).args[1], 5)\n  })\n  // act\n  await instance.set('counter', 5)\n})\n\ntest('should set to the cache and return all', async t => {\n  const { Cache } = t.context\n\n  t.plan(3)\n  // arrange\n  const instance = new Cache(t.title)\n  await instance.init()\n\n  const allBefore = await instance.getAll()\n  t.deepEqual(allBefore, {}, 'empty object when cache is empty')\n\n  await instance.set('one', 1)\n  await instance.set('two', 2)\n  await instance.set('three', 3)\n  await instance.set('four', 4)\n\n  const allAfter = await instance.getAll()\n  t.is(Object.keys(allAfter).length, 4)\n  t.deepEqual(allAfter, {\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4\n  })\n})\n\ntest('should return null when getting a non existant item', async t => {\n  const { Cache } = t.context\n\n  t.plan(1)\n  const instance = new Cache('counterapp')\n  await instance.init()\n\n  const item = await instance.get('nonexistant')\n  t.is(item, null)\n})\n\ntest('should remove from the cache and emit the change', async (t) => {\n  const { Cache } = t.context\n\n  t.plan(2)\n  // arrange\n  const instance = new Cache('counterapp')\n  await instance.init()\n  instance.db.removeItem = sinon.stub()\n  instance.db.getItem = sinon.stub()\n  // assert\n  instance.changes.subscribe(change => {\n    t.deepEqual(change, { key: 'counter', value: null })\n    t.is(instance.db.removeItem.getCall(0).args[0], 'counter')\n  })\n  // act\n  await instance.remove('counter')\n})\n\ntest('should clear from the cache and emit the change', async (t) => {\n  const { Cache } = t.context\n\n  t.plan(2)\n  // arrange\n  const instance = new Cache('counterapp')\n  await instance.init()\n  instance.db.clear = sinon.stub()\n  instance.db.setItem = sinon.stub()\n  instance.db.getItem = sinon.stub()\n\n  const observable = instance.observe('counter', 1)\n\n  // Make sure the get request is finished before we try to clear\n  await new Promise(resolve => setTimeout(resolve, 0))\n\n  // assert\n  let emissionNumber = 0\n  observable.subscribe(value => {\n    emissionNumber++\n    // first value should be 1 (the default) because getItem returns falsy\n    if (emissionNumber === 1) t.is(value, 1)\n    // second value should be the cache clear\n    if (emissionNumber === 2) t.is(value, null)\n  })\n\n  // act\n  await instance.clear()\n})\n\ntest('should observe the key\\'s value for changes in the correct order if getItem is fast', async (t) => {\n  const { Cache } = t.context\n\n  t.plan(4)\n  // arrange\n  const instance = new Cache()\n  await instance.init()\n  instance.db.getItem = sinon.stub().returns(\n    new Promise(resolve => setTimeout(resolve, 300))\n  )\n  // act\n  const observable = instance.observe('counter', 1)\n\n  // assert\n  let emissionNumber = 0\n  observable.subscribe(value => {\n    emissionNumber++\n    // first value should be 1 (the default) because getItem returns falsy\n    if (emissionNumber === 1) t.is(value, 1)\n    if (emissionNumber === 2) t.is(value, 10)\n    if (emissionNumber === 3) t.is(value, 11)\n    if (emissionNumber === 4) t.is(value, 12)\n  })\n\n  // these values will emit after get finishes\n  setTimeout(() => {\n    instance.changes.next({ key: 'counter', value: 10 })\n    instance.changes.next({ key: 'counter', value: 11 })\n    instance.changes.next({ key: 'somekey', value: 'hey' }) // will be ignored\n    instance.changes.next({ key: 'counter', value: 12 })\n  }, 500)\n\n  // hack so the test doesn't finish prematurely\n  await new Promise(resolve => setTimeout(resolve, 700))\n})\n\ntest('should observe the key\\'s value for changes in the correct order if getItem is slow', async (t) => {\n  const { Cache } = t.context\n\n  t.plan(5)\n  // arrange\n  const instance = new Cache()\n  await instance.init()\n  instance.db.getItem = sinon.stub().returns(\n    new Promise(resolve => setTimeout(resolve, 300))\n  )\n  // act\n  const observable = instance.observe('counter', 1)\n  // assert\n  let emissionNumber = 0\n  observable.subscribe(value => {\n    emissionNumber++\n    // first value should be 4 because new sets happen immediately\n    if (emissionNumber === 1) t.is(value, 4)\n    if (emissionNumber === 2) t.is(value, 5)\n    if (emissionNumber === 3) t.is(value, 10)\n    if (emissionNumber === 4) t.is(value, 11)\n    if (emissionNumber === 5) t.is(value, 12)\n  })\n\n  // these values will emit before `get` finishes\n  instance.changes.next({ key: 'counter', value: 4 })\n  instance.changes.next({ key: 'counter', value: 5 })\n\n  // these values will emit after get finishes\n  setTimeout(() => {\n    instance.changes.next({ key: 'counter', value: 10 })\n    instance.changes.next({ key: 'counter', value: 11 })\n    instance.changes.next({ key: 'somekey', value: 'hey' }) // will be ignored\n    instance.changes.next({ key: 'counter', value: 12 })\n  }, 500)\n\n  // hack so the test doesn't finish prematurely\n  await new Promise(resolve => setTimeout(resolve, 700))\n})\n"],"file":"index.test.js"}