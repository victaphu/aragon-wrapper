{"version":3,"sources":["../src/interfaces.test.js"],"names":["test","afterEach","always","sinon","restore","t","plan","availableABIs","forEach","abiName","result","true","Array","isArray","emptyResult","is","availableArtifacts","artifactName","availableMappings","namespace","appIds","appId","abi","emptyDueToUnknownMapping","emptyDueToUnknownApp","false"],"mappings":"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","sourcesContent":["import test from 'ava'\nimport sinon from 'sinon'\nimport { getAbi, getArtifact, getAppInfo, hasAppInfo } from './interfaces'\nimport { apmAppId } from './utils/apps'\n\ntest.afterEach.always(() => {\n  sinon.restore()\n})\n\ntest('interfaces: getAbi', async (t) => {\n  t.plan(12)\n  // arrange\n  const availableABIs = [\n    'aragon/ACL',\n    'aragon/AppProxy',\n    'aragon/ERCProxy',\n    'aragon/Forwarder',\n    'aragon/ForwarderFee',\n    'aragon/Kernel',\n    'aragon/EVM Script Registry',\n    'apm/APM Registry',\n    'apm/Repo',\n    'apm/ENS Subdomain Registrar',\n    'standard/ERC20'\n  ]\n  // assert\n  availableABIs.forEach(abiName => {\n    const result = getAbi(abiName)\n    t.true(Array.isArray(result), abiName)\n  })\n\n  const emptyResult = getAbi()\n  t.is(emptyResult, null)\n})\n\ntest('interfaces: getArtifact', async (t) => {\n  t.plan(13)\n  // arrange\n  const availableArtifacts = [\n    'aragon/ACL',\n    'aragon/Kernel',\n    'aragon/EVM Script Registry',\n    'apm/APM Registry',\n    'apm/Repo',\n    'apm/ENS Subdomain Registrar'\n  ]\n  // assert\n  availableArtifacts.forEach(artifactName => {\n    const result = getArtifact(artifactName)\n    t.true('functions' in result)\n    t.true('roles' in result)\n  })\n\n  const emptyResult = getArtifact()\n  t.is(emptyResult, null)\n})\n\ntest('interfaces: getAppInfo', async (t) => {\n  t.plan(29)\n  // arrange\n  const availableMappings = [\n    ['aragon', [\n      apmAppId('acl'),\n      apmAppId('evmreg'),\n      apmAppId('kernel')\n    ]],\n    ['apm', [\n      apmAppId('apm-registry'),\n      apmAppId('apm-repo'),\n      apmAppId('apm-enssub'),\n      apmAppId('apm-registry.open'),\n      apmAppId('apm-repo.open'),\n      apmAppId('apm-enssub.open')\n    ]]\n  ]\n  // assert\n  availableMappings.forEach(([namespace, appIds]) => {\n    appIds.forEach((appId) => {\n      const result = getAppInfo(appId, namespace)\n      t.true(Array.isArray(result.abi))\n      t.true('functions' in result)\n      t.true('roles' in result)\n    })\n  })\n\n  const emptyDueToUnknownMapping = getAppInfo(apmAppId('acl'), 'wrongNamespace')\n  t.is(emptyDueToUnknownMapping, null)\n\n  const emptyDueToUnknownApp = getAppInfo(apmAppId('wrongApp'), 'aragon')\n  t.is(emptyDueToUnknownApp, null)\n})\n\ntest('interfaces: hasAppInfo', async (t) => {\n  t.plan(11)\n  const availableMappings = [\n    ['aragon', [\n      apmAppId('acl'),\n      apmAppId('evmreg'),\n      apmAppId('kernel')\n    ]],\n    ['apm', [\n      apmAppId('apm-registry'),\n      apmAppId('apm-repo'),\n      apmAppId('apm-enssub'),\n      apmAppId('apm-registry.open'),\n      apmAppId('apm-repo.open'),\n      apmAppId('apm-enssub.open')\n    ]]\n  ]\n  // assert\n  availableMappings.forEach(([namespace, appIds]) => {\n    appIds.forEach((appId) => {\n      t.true(hasAppInfo(appId, namespace))\n    })\n  })\n\n  t.false(hasAppInfo(apmAppId('acl'), 'wrongNamespace'))\n  t.false(hasAppInfo(apmAppId('wrongApp'), 'aragon'))\n})\n"],"file":"interfaces.test.js"}