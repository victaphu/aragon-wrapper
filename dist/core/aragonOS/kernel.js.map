{"version":3,"sources":["../../../src/core/aragonOS/kernel.js"],"names":["SET_APP_ABI","name","type","CORE_NAMESPACE","APP_ADDR_NAMESPACE","APP_BASES_NAMESPACE","KERNEL_NAMESPACES_NAMES","Map","decodeKernelSetAppParameters","data","paramData","substring","abi","decodeParameters","getKernelNamespace","hash","has","get","isKernelAppCodeNamespace","namespaceHash","isKernelSetAppIntent","kernelApp","intent","proxyAddress","to","method","sig"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AAEA;;AACA;;AAEA,MAAMA,WAAW,GAAG,CAClB;AAAEC,EAAAA,IAAI,EAAE,WAAR;AAAqBC,EAAAA,IAAI,EAAE;AAA3B,CADkB,EAElB;AAAED,EAAAA,IAAI,EAAE,OAAR;AAAiBC,EAAAA,IAAI,EAAE;AAAvB,CAFkB,EAGlB;AAAED,EAAAA,IAAI,EAAE,YAAR;AAAsBC,EAAAA,IAAI,EAAE;AAA5B,CAHkB,CAApB;AAMA,MAAMC,cAAc,GAAG,6BAAa,MAAb,CAAvB;AACA,MAAMC,kBAAkB,GAAG,6BAAa,KAAb,CAA3B;AACA,MAAMC,mBAAmB,GAAG,6BAAa,MAAb,CAA5B;AACA,MAAMC,uBAAuB,GAAG,IAAIC,GAAJ,CAAQ,CACtC,CAACJ,cAAD,EAAiB,MAAjB,CADsC,EAEtC,CAACC,kBAAD,EAAqB,cAArB,CAFsC,EAGtC,CAACC,mBAAD,EAAsB,UAAtB,CAHsC,CAAR,CAAhC;AAMA;AACA;AACA;AACA;AACA;AACA;;AACO,SAASG,4BAAT,CAAuCC,IAAvC,EAA6C;AAClD;AACA,QAAMC,SAAS,GAAGD,IAAI,CAACE,SAAL,CAAe,EAAf,CAAlB;AACA,SAAOC,oBAAIC,gBAAJ,CAAqBb,WAArB,EAAkCU,SAAlC,CAAP;AACD;;AAEM,SAASI,kBAAT,CAA6BC,IAA7B,EAAmC;AACxC,SAAOT,uBAAuB,CAACU,GAAxB,CAA4BD,IAA5B,IACH;AAAEd,IAAAA,IAAI,EAAEK,uBAAuB,CAACW,GAAxB,CAA4BF,IAA5B,CAAR;AAA2CA,IAAAA;AAA3C,GADG,GAEH,IAFJ;AAGD;;AAEM,SAASG,wBAAT,CAAmCC,aAAnC,EAAkD;AACvD,SAAOA,aAAa,KAAKd,mBAAzB;AACD;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACO,SAASe,oBAAT,CAA+BC,SAA/B,EAA0CC,MAA1C,EAAkD;AACvD,MAAI,CAAC,2BAAeD,SAAS,CAACE,YAAzB,EAAuCD,MAAM,CAACE,EAA9C,CAAL,EAAwD,OAAO,KAAP;AAExD,QAAMC,MAAM,GAAG,iCAAsBJ,SAAtB,EAAiCC,MAAM,CAACb,IAAxC,CAAf;AACA,SAAO,CAAC,CAACgB,MAAF,IAAYA,MAAM,CAACC,GAAP,KAAe,iCAAlC;AACD","sourcesContent":["import abi from 'web3-eth-abi'\nimport { soliditySha3 } from 'web3-utils'\n\nimport { addressesEqual } from '../../utils'\nimport { findAppMethodFromData } from '../../utils/apps'\n\nconst SET_APP_ABI = [\n  { name: 'namespace', type: 'bytes32' },\n  { name: 'appId', type: 'bytes32' },\n  { name: 'appAddress', type: 'address' }\n]\n\nconst CORE_NAMESPACE = soliditySha3('core')\nconst APP_ADDR_NAMESPACE = soliditySha3('app')\nconst APP_BASES_NAMESPACE = soliditySha3('base')\nconst KERNEL_NAMESPACES_NAMES = new Map([\n  [CORE_NAMESPACE, 'Core'],\n  [APP_ADDR_NAMESPACE, 'Default apps'],\n  [APP_BASES_NAMESPACE, 'App code']\n])\n\n/**\n * Decode `Kernel.setApp()` parameters based on transaction data.\n *\n * @param  {Object} data Transaction data\n * @return {Object} Decoded parameters for `setApp()` (namespace, appId, appAddress)\n */\nexport function decodeKernelSetAppParameters (data) {\n  // Strip 0x prefix + bytes4 sig to get parameter data\n  const paramData = data.substring(10)\n  return abi.decodeParameters(SET_APP_ABI, paramData)\n}\n\nexport function getKernelNamespace (hash) {\n  return KERNEL_NAMESPACES_NAMES.has(hash)\n    ? { name: KERNEL_NAMESPACES_NAMES.get(hash), hash }\n    : null\n}\n\nexport function isKernelAppCodeNamespace (namespaceHash) {\n  return namespaceHash === APP_BASES_NAMESPACE\n}\n\n/**\n * Is the transaction intent for `Kernel.setApp()`?\n *\n * @param  {Object} kernelApp App artifact for Kernel\n * @param  {Object} intent Transaction intent\n * @return {Boolean} Whether the intent is `Kernel.setApp()`\n */\nexport function isKernelSetAppIntent (kernelApp, intent) {\n  if (!addressesEqual(kernelApp.proxyAddress, intent.to)) return false\n\n  const method = findAppMethodFromData(kernelApp, intent.data)\n  return !!method && method.sig === 'setApp(bytes32,bytes32,address)'\n}\n"],"file":"kernel.js"}