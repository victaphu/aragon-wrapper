{"version":3,"sources":["../../../src/core/proxy/index.js"],"names":["ContractProxy","constructor","address","jsonInterface","web3","initializationBlock","contract","eth","Contract","pastEvents","eventNames","options","fromBlock","length","process","env","PAST_EVENTS_BATCH_SIZE","getPastEvents","eventName","then","events","filter","event","includes","eventSource","allEvents","pipe","eventDelay","configurationKeys","SUBSCRIPTION_EVENT_DELAY","call","method","params","methods","Error","lastParam","slice","updateInitializationBlock","initBlock","getInitializationBlock"],"mappings":"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","sourcesContent":["import { fromEvent, from } from 'rxjs'\nimport { delay, filter } from 'rxjs/operators'\nimport { getConfiguration } from '../../configuration'\nimport * as configurationKeys from '../../configuration/keys'\nimport { getEventNames, getPastEventsByBatch } from '../../utils/events'\n\nexport default class ContractProxy {\n  constructor(address, jsonInterface, web3, { initializationBlock = 0 } = {}) {\n    this.address = address\n    this.contract = new web3.eth.Contract(\n      jsonInterface,\n      address\n    )\n    this.web3 = web3\n    this.initializationBlock = initializationBlock\n  }\n\n  /**\n   * Fetches past events for a given block range\n   *\n   * @param {Array<String>} eventNames events to fetch\n   * @param {Object} [options] web3.eth.Contract.getPastEvents()' options\n   *   The fromBlock is defaulted to this app's initializationBlock unless explicitly provided\n   * @return {Observable} Single-emission observable with an array of past events\n   */\n  pastEvents(eventNames, options = {}) {\n    options.fromBlock = options.fromBlock || this.initializationBlock\n    eventNames = getEventNames(eventNames)\n\n    // The `from`s only unpack the returned Promises (and not the array inside them!)\n    if (eventNames.length === 1) {\n      if (!process.env.PAST_EVENTS_BATCH_SIZE) {\n        return from(this.contract.getPastEvents(eventNames[0], options))\n      }\n      // Get a specific event or all events unfiltered\n      return from(\n        getPastEventsByBatch({ options, contract: this.contract, eventName: eventNames[0] })\n      )\n    } else {\n      // Get all events and filter ourselves\n      return from(\n        this.contract.getPastEvents('allEvents', options)\n          .then(events => events.filter(event => eventNames.includes(event.event)))\n      )\n    }\n  }\n\n  /**\n   * Subscribe to events, fetching past events if necessary (based on the given options)\n   *\n   * @param {Array<String>} eventNames events to fetch\n   * @param {Object} options web3.eth.Contract.events()' options\n   *   The fromBlock is defaulted to this app's initializationBlock unless explicitly provided\n   * @return {Observable} Multi-emission observable with individual events\n   */\n  events(eventNames, options = {}) {\n    options.fromBlock = options.fromBlock || this.initializationBlock\n    eventNames = getEventNames(eventNames)\n\n    let eventSource\n    if (eventNames.length === 1) {\n      // Get a specific event or all events unfiltered\n      eventSource = fromEvent(\n        this.contract.events[eventNames[0]](options),\n        'data'\n      )\n    } else {\n      // Get all events and filter ourselves\n      eventSource = fromEvent(\n        this.contract.events.allEvents(options),\n        'data'\n      ).pipe(\n        filter((event) => eventNames.includes(event.event))\n      )\n    }\n\n    const eventDelay = getConfiguration(configurationKeys.SUBSCRIPTION_EVENT_DELAY) || 0\n    // Small optimization: don't pipe a delay if we don't have to\n    return eventDelay ? eventSource.pipe(delay(eventDelay)) : eventSource\n  }\n\n  async call(method, ...params) {\n    if (!this.contract.methods[method]) {\n      throw new Error(`No method named ${method} on ${this.address}`)\n    }\n\n    const lastParam = params[params.length - 1]\n\n    return (typeof lastParam === 'object' && lastParam !== null)\n      ? this.contract.methods[method](...params.slice(0, -1)).call(lastParam)\n      : this.contract.methods[method](...params).call()\n  }\n\n  async updateInitializationBlock() {\n    const initBlock = await this.contract.methods.getInitializationBlock().call()\n    this.initializationBlock = initBlock\n  }\n}\n"],"file":"index.js"}