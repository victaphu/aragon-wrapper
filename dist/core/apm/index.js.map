{"version":3,"sources":["../../../src/core/apm/index.js"],"names":["DEFAULT_FETCH_TIMEOUT","getApmInternalAppInfo","appId","fetchRepoContentFromVersion","fetcher","versionData","fetchTimeout","contentURI","contractAddress","version","appContent","err","console","warn","web3","ipfsGateway","FileFetcher","getContentPath","location","provider","path","getFullPath","fetchLatestRepoContent","repoAddress","options","repo","fetchLatestRepoContentForContract","codeAddress","fetchVersionData"],"mappings":";;;;;;;;;;;;AAAA;;AACA;;AAMA;;AACA;;;;;;AAEA,MAAMA,qBAAqB,GAAG,KAA9B,C,CAAoC;;AAE7B,SAASC,qBAAT,CAAgCC,KAAhC,EAAuC;AAC5C,SAAO,4BAAWA,KAAX,EAAkB,KAAlB,CAAP;AACD;;AAED,eAAeC,2BAAf,CAA4CC,OAA5C,EAAqDC,WAArD,EAAkE;AAAEC,EAAAA;AAAF,CAAlE,EAAoF;AAClF,QAAM;AAAEC,IAAAA,UAAF;AAAcC,IAAAA,eAAd;AAA+BC,IAAAA;AAA/B,MAA2CJ,WAAjD;AAEA,MAAIK,UAAJ;;AACA,MAAI;AACFA,IAAAA,UAAU,GAAG,MAAM,+BAAoBN,OAApB,EAA6BG,UAA7B,EAAyC;AAAED,MAAAA;AAAF,KAAzC,CAAnB;AACD,GAFD,CAEE,OAAOK,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,IAAR,CAAa,8BAAb,EAA6CF,GAA7C;AACD;;AAED,yCACKD,UADL;AAEEF,IAAAA,eAFF;AAGEC,IAAAA;AAHF;AAKD;;AAEc,kBAAUK,IAAV,EAAgB;AAAEC,EAAAA,WAAF;AAAeT,EAAAA,YAAY,GAAGN;AAA9B,IAAwD,EAAxE,EAA4E;AACzF,QAAMI,OAAO,GAAG,IAAIY,oBAAJ,CAAgB;AAAED,IAAAA;AAAF,GAAhB,CAAhB;AAEA,SAAO;AACLE,IAAAA,cAAc,EAAE,CAAC;AAAEC,MAAAA,QAAF;AAAYC,MAAAA;AAAZ,KAAD,EAAyBC,IAAzB,KACdhB,OAAO,CAACiB,WAAR,CAAoBF,QAApB,EAA8BD,QAA9B,EAAwCE,IAAxC,CAFG;AAGLE,IAAAA,sBAAsB,EAAE,OAAOC,WAAP,EAAoBC,OAApB,KAAgC;AACtD,YAAMC,IAAI,GAAG,yBAAcF,WAAd,EAA2BT,IAA3B,CAAb;AACA,aAAOX,2BAA2B,CAChCC,OADgC,EAEhC,MAAM,gCAAqBqB,IAArB,CAF0B;AAG9BnB,QAAAA;AAH8B,SAGbkB,OAHa,EAAlC;AAKD,KAVI;AAWLE,IAAAA,iCAAiC,EAAE,OAAOH,WAAP,EAAoBI,WAApB,EAAiCH,OAAjC,KAA6C;AAC9E,YAAMC,IAAI,GAAG,yBAAcF,WAAd,EAA2BT,IAA3B,CAAb;AACA,YAAMc,gBAAgB,GACpB,mDAAmCL,WAAnC,EAAgDI,WAAhD,IACI,gCAAqBF,IAArB,CADJ,GAEI,2CAAgCA,IAAhC,EAAsCE,WAAtC,CAHN;AAKA,aAAOxB,2BAA2B,CAChCC,OADgC,EAEhC,MAAMwB,gBAF0B;AAG9BtB,QAAAA;AAH8B,SAGbkB,OAHa,EAAlC;AAKD;AAvBI,GAAP;AAyBD","sourcesContent":["import { shouldOverrideAppWithLatestVersion } from './overrides'\nimport {\n  getRepoLatestVersion,\n  getRepoLatestVersionForContract,\n  fetchRepoContentURI,\n  makeRepoProxy\n} from './repo'\nimport { getAppInfo } from '../../interfaces'\nimport FileFetcher from '../../utils/FileFetcher'\n\nconst DEFAULT_FETCH_TIMEOUT = 10000 // 10s\n\nexport function getApmInternalAppInfo (appId) {\n  return getAppInfo(appId, 'apm')\n}\n\nasync function fetchRepoContentFromVersion (fetcher, versionData, { fetchTimeout }) {\n  const { contentURI, contractAddress, version } = versionData\n\n  let appContent\n  try {\n    appContent = await fetchRepoContentURI(fetcher, contentURI, { fetchTimeout })\n  } catch (err) {\n    console.warn('Fetching repo content failed', err)\n  }\n\n  return {\n    ...appContent,\n    contractAddress,\n    version\n  }\n}\n\nexport default function (web3, { ipfsGateway, fetchTimeout = DEFAULT_FETCH_TIMEOUT } = {}) {\n  const fetcher = new FileFetcher({ ipfsGateway })\n\n  return {\n    getContentPath: ({ location, provider }, path) =>\n      fetcher.getFullPath(provider, location, path),\n    fetchLatestRepoContent: async (repoAddress, options) => {\n      const repo = makeRepoProxy(repoAddress, web3)\n      return fetchRepoContentFromVersion(\n        fetcher,\n        await getRepoLatestVersion(repo),\n        { fetchTimeout, ...options }\n      )\n    },\n    fetchLatestRepoContentForContract: async (repoAddress, codeAddress, options) => {\n      const repo = makeRepoProxy(repoAddress, web3)\n      const fetchVersionData =\n        shouldOverrideAppWithLatestVersion(repoAddress, codeAddress)\n          ? getRepoLatestVersion(repo)\n          : getRepoLatestVersionForContract(repo, codeAddress)\n\n      return fetchRepoContentFromVersion(\n        fetcher,\n        await fetchVersionData,\n        { fetchTimeout, ...options }\n      )\n    }\n  }\n}\n"],"file":"index.js"}